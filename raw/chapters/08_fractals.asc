Chapter 8.  Fractals
--------------------
((("fractals")))((("natural phenomenons","fractals")))
[quote, Jonathan Coulton, lyrics from “Mandelbrot Set”]
____________________________________________________________________
“Pathological monsters! cried the terrified mathematician + 
Every one of them a splinter in my eye + 
I hate the Peano Space and the Koch Curve + 
I fear the Cantor Ternary Set + 
The Sierpinski Gasket makes me wanna cry + 
And a million miles away a butterfly flapped its wings + 
On a cold November day a man named Benoit Mandelbrot was born” 
____________________________________________________________________
((("Euclid")))((("Euclidean geometry")))
Once upon a time, I took a course in high school called “Geometry.”  Perhaps you did too.   You learned about shapes in one dimension, two dimensions, and maybe even three.  What is the circumference of a circle?  The area of a rectangle?   The distance between a point and a line?   Come to think of it, we’ve been studying geometry all along in this book, using vectors to describe the motion of bodies in Cartesian space.  This sort of geometry is generally referred to as Euclidean geometry, after the Greek mathematician Euclid.

[[chapter08_figure1]]
image::imgs/chapter08/ch08_01.png[alt="Figure 8.1"]

For us nature coders, we have to ask the question: Can we describe our world with Euclidean geometry?    The LCD screen I’m staring at right now sure looks like a rectangle.  And the plum I ate this morning is circular.  But what if I were to look further, and consider the trees that line the street, the leaves that hang off those trees, the lightning from last night’s thunderstorm, the cauliflower I ate for dinner, the blood vessels in my body, and the mountains and coastlines that cover land beyond New York City?   Most of the stuff you find in nature cannot be described by the idealized geometrical forms of Euclidean geometry.  So if we want to start building computational designs with patterns beyond the simple shapes [function]*ellipse()*, [function]*rect()*, and [function]*line()*, it’s time for us to learn about the concepts behind and techniques for simulating the geometry of nature: fractals.

[[chapter08_section1]]
=== 8.1  What Is a Fractal?
((("fractals","defined")))((("Mandelbrot, Benoit")))
[[chapter08_figure2]]
image::imgs/chapter08/ch08_02.png[classname="half-width-right",alt="Figure 8.2 One of the most well-known and recognizable fractal patterns is named for Benoit Mandelbrot himself.   Generating the Mandelbrot set involves testing the properties of complex numbers after they are passed through an iterative function.  Do they tend to infinity?  Do they stay bounded?  While a fascinating mathematical discussion, this “escape-time” algorithm is a less practical method for generating fractals than the recursive techniques we’ll examine in this chapter.  However, an example for generating the Mandelbrot set is included in the code examples."]
((("?The Fractal Geometry of Nature (Mandelbrot)")))
The term *_fractal_* (from the Latin _fractus_, meaning “broken”) was coined by the mathematician Benoit Mandelbrot in 1975.  In his seminal work “The Fractal Geometry of Nature,” he defines a fractal as “a rough or fragmented geometric shape that can be split into parts, each of which is (at least approximately) a reduced-size copy of the whole.”  Let’s illustrate this definition with two simple examples.  First, let’s think about a tree branching structure (for which we’ll write the code later):  

[[chapter08_figure3]]
image::imgs/chapter08/ch08_03.png[alt="Figure 8.3"]

Notice how the tree in Figure 8.3 has a single root with two branches connected at its end.  Each one of those branches has two branches at its end and those branches have two branches and so on and so forth.  What if we were to pluck one branch from the tree and examine it on its own?

[[chapter08_figure4]]
image::imgs/chapter08/ch08_04.png[alt="Figure 8.4"]
((("fractals","self-replecating behavior of")))((("self-similarity of fractals")))
Looking closely at a given section of the tree, we find that the shape of this branch resembles the tree itself.   This is known as *_self-similarity_*; as Mandelbrot stated, each part is a “reduced-size copy of the whole.”

The above tree is perfectly symmetrical and the parts are, in fact, exact replicas of the whole.  However, fractals do not have to be perfectly self-similar.  Let’s take a look at a graph of the stock market (adapted from actual Apple stock data).

[[chapter08_figure5]]
image::imgs/chapter08/ch08_05.png[alt="Figure 8.5: Graph A"]

And one more.

[[chapter08_figure6]]
image::imgs/chapter08/ch08_06.png[alt="Figure 8.6: Graph B"]
((("fractals","stochastic fractals")))((("stochastic fractals")))
In these graphs, the x-axis is time and the y-axis is the stock’s value.   It’s not an accident that I omitted the labels, however.   Graphs of stock market data are examples of fractals because they look the same at any scale.  Are these graphs of the stock over one year?  One day?  One hour?  There’s no way for you to know without a label.  (Incidentally, graph A shows six months’ worth of data and graph B zooms into a tiny part of graph A, showing six hours.) 

[[chapter08_figure7]]
image::imgs/chapter08/ch08_07.png[alt="Figure 8.7"]

This is an example of a *_stochastic_* fractal, meaning that it is built out of probabilities and randomness.  Unlike the deterministic tree-branching structure, it is statistically self-similar.  As we go through the examples in this chapter, we will look at both deterministic and stochastic techniques for generating fractal patterns.
((("Euclidean geometry","fractals and")))((("fractals","fine structure of")))
While self-similarity is a key trait of fractals, it’s important to realize that self-similarity alone does not make a fractal.  After all, a line is self-similar.  A line looks the same at any scale, and can be thought of as comprising lots of little lines.  But it’s not a fractal.  Fractals are  characterized by having a fine structure at small scales (keep zooming into the stock market graph and you’ll continue to find fluctuations) and cannot be described with Euclidean geometry.  If you can say “It’s a line!” then it’s not a fractal.    
((("fractals","recursion")))((("recursion")))
Another fundamental component of fractal geometry is recursion.  Fractals all have a recursive definition.  We'll start with recursion before developing techniques and code examples for building fractal patterns in Processing.

[[chapter08_section2]]
=== 8.2 Recursion
((("Cantor set")))((("Cantor, George")))
Let’s begin our discussion of recursion by examining the first appearance of fractals in modern mathematics.  In 1883, German mathematician George Cantor developed simple rules to generate an infinite set:

[[chapter08_figure8]]
image::imgs/chapter08/ch08_08.png[alt="Figure 8.8: The Cantor set"]

There is a feedback loop at work here.  Take a single line and break it into two.  Then return to those two lines and apply the same rule, breaking each line into two, and now we’re left with four.  Then return to those four lines and apply the rule.  Now you’ve got eight.   This process is known as *_recursion_*: the repeated application of a rule to successive results.   Cantor was interested in what happens when you apply these rules an infinite number of times.   We, however, are working in a finite pixel space and can mostly ignore the questions and paradoxes that arise from infinite recursion.  We will instead construct our code in such a way that we do not apply the rules forever (which would cause our program to freeze).
((("recursion","implementing")))
Before we implement the Cantor set, let’s take a look at what it means to have recursion in code.
Here’s something we’re used to doing all the time—calling a function inside another function. 

[source,java]
----
void someFunction() {
  // Calling the function background() 
  // in the definition of someFunction()
  background(0);
}
----

What would happen if we called the function we are defining within the function itself?   Can [function]*someFunction()* call [function]*someFunction()*?  

[source,java]
----
void someFunction() {
  someFunction();
}
----
((("factorial")))((("recursion","factorial")))
In fact, this is not only allowed, but it’s quite common (and essential to how we will implement the Cantor set).   Functions that call themselves are _recursive_ and good for solving certain problems.  For example, certain mathematical calculations are implemented recursively; the most common example is _factorial_. 

The factorial of any number n, usually written as n!, is defined as:


[formula]*n! = n * n – 1 * . . . . * 3 * 2 * 1* + 
[formula]*0! = 1*

Here we'll write a function in Processing that uses a [function]*for* loop to calculate factorial:

[source,java]
----
int factorial(int n) {
  int f = 1;
  //[full] Using a regular loop to compute factorial
  for (int i = 0; i < n; i++) {
    f = f * (i+1);
  }
  //[end]
  return f;
}
----

Upon close examination, you'll notice something interesting about how factorial works. Let’s look at 4! and 3!

[formula]*4! = 4 * 3 * 2 * 1* + 
[formula]*3! = 3 * 2 * 1*

*_therefore. . ._*  

[formula]*4! = 4 * 3!*

In more general terms, for any positive integer n:

[formula]*n! = n * (n-1)!* + 
[formula]*1! = 1*

Written out:

The _factorial_ of [var]*n* is defined as [var]*n* times the _factorial_ of [var]*n-1*.

The definition of *_factorial_* includes *_factorial_*?!  It’s kind of like defining “tired" as “the feeling you get when you are tired.”   This concept of self-reference in functions is an example of recursion.   And we can use it to write a factorial function that calls itself.

[source,java]
----
int factorial(int n) {
  if (n == 1) {
    return 1;
  } else {
    return n * factorial(n-1);
  }
}
----

It may look crazy, but it works.   Here are the steps that happen when [function]*factorial(4)* is called.

[[chapter08_figure9]]
image::imgs/chapter08/ch08_09.png[alt="Figure 8.9"]

We can apply the same principle to graphics with interesting results, as we will see in many examples throughout this chapter, Take a look at this recursive function.

image::imgs/chapter08/ch08_ex01.png[canvas="processingjs/chapter08/_8_01_Recursion/_8_01_Recursion.pde",classname="screenshot"]

[[chapter08_example1]]
[example]*Example 8.1: Recursive Circles I*

[source,java]
----
void drawCircle(int x, int y, float radius) {
  ellipse(x, y, radius, radius);
  if(radius > 2) {
    radius *= 0.75f;
    // The drawCircle() function is 
    // calling itself recursively.
    drawCircle(x, y, radius);
  }
}
----

[function]*drawCircle()* draws an ellipse based on a set of parameters that it receives as arguments. It then calls itself with those same parameters, adjusting them slightly. The result is a series of circles, each of which is drawn inside the previous circle. 
((("exit conditions for recursion")))((("recursion","exit conditions")))
Notice that the above function only recursively calls itself if the radius is greater than 2.  This is a crucial point.  As with iteration, _all recursive functions must have an exit condition!_    You likely are already aware that all for and while loops must include a Boolean expression that eventually evaluates to false, thus exiting the loop. Without one, the program would crash, caught inside of an infinite loop. The same can be said about recursion.  If a recursive function calls itself forever and ever, you’ll be most likely be treated to a nice frozen screen.

This circles example is rather trivial; it could easily be achieved through simple iteration. However, for scenarios in which a function calls itself more than once, recursion becomes wonderfully elegant.

Let’s make [function]*drawCircle()* a bit more complex.    For every circle displayed, draw a circle half its size to the left and right of that circle.

image::imgs/chapter08/ch08_ex02.png[canvas="processingjs/chapter08/_8_02_Recursion/_8_02_Recursion.pde",classname="screenshot"]

[[chapter08_example2]]
[example]*Example 8.2: Recursion twice* 

[source,java]
----
void setup() {
  size(400,400);  
  smooth();
}

void draw() {
  background(255);
  drawCircle(width/2,height/2,200); 
}

void drawCircle(float x, float y, float radius) {
  stroke(0);
  noFill();
  ellipse(x, y, radius, radius);
  if(radius > 2) {
    //[full] drawCircle() calls itself twice, creating 
    // a branching effect.  For every circle, 
    // a smaller circle is drawn to the left and right. 
    drawCircle(x + radius/2, y, radius/2);
    drawCircle(x - radius/2, y, radius/2);
    //[end]
  }
}
----

With just a little more code, we could also add a circle above and below each circle.

image::imgs/chapter08/ch08_ex03.png[canvas="processingjs/chapter08/_8_03_Recursion/_8_03_Recursion.pde",classname="screenshot"]

[[chapter08_example3]]
[example]*Example 8.3: Recursion four times* 

[source,java]
----
void drawCircle(float x, float y, float radius) {
  ellipse(x, y, radius, radius);
  if(radius > 8) {
    drawCircle(x + radius/2, y, radius/2);
    drawCircle(x - radius/2, y, radius/2);
    drawCircle(x, y + radius/2, radius/2);
    drawCircle(x, y - radius/2, radius/2);
  }
}
----

Try reproducing this sketch with iteration instead of recursion—I dare you!

[[chapter08_section3]]
=== 8.3  The Cantor Set with a Recursive Function
((("Cantor set","recursion and")))
Now we’re ready to visualize the Cantor set in Processing using a recursive function.  Where do we begin?  Well, we know that the Cantor set begins with a line.  So let’s start there and write a function that draws a line.

[source,java]
----
void cantor(float x, float y, float len) {
  line(x,y,x+len,y);
}
----

The above [function]*cantor()* function draws a line that starts at pixel coordinate _(x,y)_ with a length of len.  (The line is drawn horizontally here, but this is an arbitrary decision.)  So if we called that function, saying:

[source,java]
----
cantor(10, 20, width-20);
----

we’d get the following:

[[chapter08_figure10]]
image::imgs/chapter08/ch08_10.png[alt="Figure 8.10"]

[[chapter08_figure11]]
image::imgs/chapter08/ch08_11.png[classname="half-width-right",alt="Figure 8.11"]

Now, the Cantor rule tells us to erase the middle third of that line, which leaves us with two lines, one from the beginning of the line to the one-third mark, and one from the two-thirds mark to the end of the line.

We can now add two more lines of code to draw the second pair of lines, moving the y location down a bunch of pixels so that we can see the result below the original line.

[source,java]
----
void cantor(float x, float y, float len) {
  line(x,y,x+len,y);
  
  y += 20;
  // From start to 1/3rd
  line(x,y,x+len/3,y); //[bold]
  // From 2/3rd to end
  line(x+len*2/3,y,x+len,y); //[bold]
}
----

[[chapter08_figure12]]
image::imgs/chapter08/ch08_12.png[alt="Figure 8.12"]

While this is a fine start, such a manual approach of calling [function]*line()* for each line is not what we want.   It will get unwieldy very quickly, as we’d need four, then eight, then sixteen calls to [function]*line()*.  Yes, a for loop is our usual way around such a problem, but give that a try and you’ll see that working out the math for each iteration quickly proves inordinately complicated.   Here is where recursion comes and rescues us.  

Take a look at where we draw that first line from the start to the one-third mark.

[source,java]
----
   line(x,y,x+len/3,y);
----

Instead of calling the [function]*line()* function directly, we can simply call the [function]*cantor()* function itself.  After all, what does the [function]*cantor()* function do?  It draws a line at an _(x,y)_ location with a given length!  And so:

[source,java]
----
   line(x,y,x+len/3,y);         becomes ------->  cantor(x,y,len/3);
----

And for the second line:

[source,java]
----
   line(x+len*2/3,y,x+len,y);   becomes ------->  cantor(x+len*2/3,y,len/3);
----

Leaving us with:

[source,java]
----
void cantor(float x, float y, float len) {
  line(x,y,x+len,y);
  
  y += 20;
  
  cantor(x,y,len/3);
  cantor(x+len*2/3,y,len/3);
}
----

And since the [function]*cantor()* function is called recursively, the same rule will be applied to the next lines and to the next and to the next as [function]*cantor()* calls itself again and again!  Now, don’t go and run this code yet.  We’re missing that crucial element: an exit condition.   We’ll want to make sure we stop at some point—for example, if the length of the line ever is less than one pixel.

image::imgs/chapter08/ch08_ex04.png[canvas="processingjs/chapter08/_8_04_CantorSet/_8_04_CantorSet.pde",classname="screenshot"]

[[chapter08_example4]]
[example]*Example 8.4: Cantor set*

[source,java]
----
void cantor(float x, float y, float len) {
  // Stop at 1 pixel!
  if (len >= 1) {
    line(x,y,x+len,y);
    y += 20;
    cantor(x,y,len/3);
    cantor(x+len*2/3,y,len/3);
  }
}
----

.Exercise 8.1
==============================
Exercise:  Using drawCircle() and the Cantor set as models, generate your own pattern with recursion.  Here is a screenshot of one that uses lines.

image::imgs/chapter08/ch08_exc01.png[classname="screenshot"]

==============================

[[chapter08_section4]]
=== 8.4  The Koch Curve and the ArrayList Technique
((("ArrayList class (Java)","fractals and")))((("fractals","Koch curve")))((("Koch curve")))((("recursion","ArrayList objects and")))
Writing a function that recursively calls itself is one technique for generating a fractal pattern on screen.  However, what if you wanted the lines in the above Cantor set to exist as individual objects that could be moved independently?   The recursive function is simple and elegant, but it does not allow you to do much besides simply generating the pattern itself.  However, there is another way we can apply recursion in combination with an _ArrayList_ that will allow us to not only generate a fractal pattern, but keep track of all its individual parts as objects.

To demonstrate this technique, let’s look at another famous fractal pattern, discovered in 1904 by Swedish mathematician Helge von Koch.   Here are the rules.  (Note that it starts the same way as the Cantor set, with a single line.)

[[chapter08_figure13]]
image::imgs/chapter08/ch08_13.png[alt="Figure 8.13"]

The result looks like:

[[chapter08_figure14]]
image::imgs/chapter08/ch08_14.png[alt="Figure 8.14"]
((("Monster curve")))
[NOTE]
.The “Monster” Curve
==============================
The Koch curve and other fractal patterns are often called “mathematical monsters.”   This is due to an odd paradox that emerges when you apply the recursive definition an infinite number of times.  If the length of the original starting line is 1, the first iteration of the Koch curve will yield a line of length four-thirds (each segment is one-third the length of the starting line).  Do it again and you get a length of sixteen-ninths.  As you iterate towards infinity, the length of the Koch curve approaches infinity.  Yet it fits in the tiny finite space provided right here on this paper (or screen)!  

Since we are working in the Processing land of finite pixels, this theoretical paradox won’t be a factor for us.  We’ll have to limit the number of times we recursively apply the Koch rules so that our program won’t run out of memory or crash.
==============================

We could proceed in the same manner as we did with the Cantor set, and write a recursive function that iteratively applies the Koch rules over and over.   Nevertheless, we are going to tackle this problem in a different manner by treating each segment of the Koch curve as an individual object.  This will open up some design possibilities.  For example, if each segment is an object, we could allow each segment to move independently from its original location and participate in a physics simulation.  In addition, we could use a random color, line thickness, etc. to display each segment differently.

In order to accomplish our goal of treating each segment as an individual object, we must first decide what this object should be in the first place.  What data should it store?  What functions should it have?

The Koch curve is a series of connected lines, and so we will think of each segment as a “KochLine.”  Each Koch line has a start point (“a”) and an end point (“b”).  These points are [klass]*PVector* objects, and the line is drawn with Processing’s [function]*line()* function.

[source,java]
----
class KochLine {

  //[full] A line between two points: start and end
  PVector start;
  PVector end;
  //[end]

  KochLine(PVector a, PVector b) {
    start = a.get();
    end = b.get();
  }

  void display() {
    stroke(0);
    // Draw the line from PVector start to end.
    line(start.x, start.y, end.x, end.y);
  }
}
----

Now that we have our [klass]*KochLine* class, we can get started on the main program.  We’ll need a data structure to keep track of what will eventually become many [klass]*KochLine* objects, and an [klass]*ArrayList* (see Chapter 4 for a review of [klass]*ArrayList*s) will do just fine.

[source,java]
----
ArrayList<KochLine> lines;
----

In [function]*setup()*, we’ll want to create the [klass]*ArrayList* and add the first line segment to it, a line that stretches from 0 to the width of the sketch.

[source,java]
----
void setup() {
  size(600, 300);
  // Create the ArrayList
  lines = new ArrayList<KochLine>();

  // Left side of window
  PVector start = new PVector(0, 200);
  // Right side of window
  PVector end   = new PVector(width, 200);

  // The first KochLine object
  lines.add(new KochLine(start, end));
}
----

Then in [function]*draw()*, all [klass]*KochLine* objects (just one right now) can be displayed in a loop.

[source,java]
----
void draw() {
  background(255);
  for (KochLine l : lines) {
    l.display();
  }
}
----

This is our foundation.  Let’s review what we have so far:

- *_KochLine class:_* A class to keep track of a line from point A to B.
- *_ArrayList:_* A list of all [klass]*KochLine* objects.

With the above elements, how and where do we apply Koch rules and principles of recursion?  
((("Koch curve","implementing")))
Remember the Game of Life cellular automata?  In that simulation, we always kept track of two generations: current and next.  When we were finished computing the next generation, next became current and we moved on to computing the new next generation.  
 We are going to apply a similar technique here.  We have an [klass]*ArrayList* that keeps track of the current set of [klass]*KochLine* objects (at the start of the program, there is only one).  We will need a second [klass]*ArrayList* (let’s call it “next”) where we will place all the new KochLine objects that are generated from applying the Koch rules.   For every [klass]*KochLine* object in the current [klass]*ArrayList*, four new [klass]*KochLine* objects are added to the next [klass]*ArrayList*.  When we’re done, the next [klass]*ArrayList* becomes the current one.

[[chapter08_figure15]]
image::imgs/chapter08/ch08_15.png[alt="Figure 8.15"]

Here’s how the code will look:

[source,java]
----
void generate() {
  // Create the next ArrayList...
  ArrayList next = new ArrayList<KochLine>();

  // ...for every current line.
  for (KochLine l : lines) {

    //[full] Add four new lines. (We need to figure out how
    // to compute the locations of these lines!)
    next.add(new KochLine(???,???));
    next.add(new KochLine(???,???));
    next.add(new KochLine(???,???));
    next.add(new KochLine(???,???));
    //[end]
  }
  // The new ArrayList is now the 
  // one we care about!
  lines = next;
}
----

By calling [function]*generate()* over and over again (for example, each time the mouse is pressed), we recursively apply the Koch curve rules to the existing set of [klass]*KochLine* objects.
 Of course, the above omits the real “work” here, which is figuring out those rules.  How do we break one line segment into four as described by the rules?   While this can be accomplished with some simple arithmetic and trigonometry, since our [klass]*KochLine* object uses [klass]*PVector*, this is a nice opportunity for us to practice our vector math.  Let’s establish how many points we need to compute for each [klass]*KochLine* object.

[[chapter08_figure16]]
image::imgs/chapter08/ch08_16.png[alt="Figure 8.16"]

As you can see from the above figure, we need five points  (A, B, C, D, and E) to generate the new [klass]*KochLine* objects and make the new line segments (AB, BC, CD, and DE).  

[source,java]
----
    next.add(new KochLine(a,b));
    next.add(new KochLine(b,c));
    next.add(new KochLine(c,d));
    next.add(new KochLine(d,e));
----

Where do we get these points?  Since we have a [klass]*KochLine* object, why not ask the [klass]*KochLine* object to compute all these points for us?   

[source,java]
----
void generate() {
  ArrayList next = new ArrayList<KochLine>();
  for (KochLine l : lines) {

    //[full] The KochLine object has five functions, 
    // each of which return a PVector according 
    // to the Koch rules
    PVector a = l.kochA();
    PVector b = l.kochB();
    PVector c = l.kochC();
    PVector d = l.kochD();
    PVector e = l.kochE();
    //[end]

    next.add(new KochLine(a, b));
    next.add(new KochLine(b, c));
    next.add(new KochLine(c, d));
    next.add(new KochLine(d, e));
  }

  lines = next;
}
----

Now we just need to write five new functions in the [klass]*KochLine* class, each one returning a [klass]*PVector* according to <<chapter08_figure16, Figure 8.16>> above.  Let’s knock off [function]*kochA()* and [function]*kochE()* first, which are simply the start and end points of the original line.

[source,java]
----
  PVector kochA() {
    // Note the use of get(), which returns a copy of the PVector. As was noted in
    // Chapter 6, section 14, we want to avoid making copies whenever 
    // possible, but here we will need a new PVector in case we want the segments to move 
    // independently of each other.
    return start.get();
  }

  PVector kochE() {
    return end.get();
  } 

----

Now let’s move on to points B and D.  B is one-third of the way along the line segment and D is two-thirds.  Here we can make a [klass]*PVector* that points from start to end and shrink it to one-third the length for B and two-thirds the length for D to find these points.

[[chapter08_figure17]]
image::imgs/chapter08/ch08_17.png[alt="Figure 8.17"]

[source,java]
----
  PVector kochB() {
    // PVector from start to end
    PVector v = PVector.sub(end, start);
    // One-third the length
    v.div(3);
    // Add that PVector to the beginning of the line
    // to find the new point.
    v.add(start);
    return v;
  }    

  PVector kochD() {
    PVector v = PVector.sub(end, start);
    // Same thing here, only we need to move two-thirds
    // along the line instead of one-third.
    v.mult(2/3.0);
    v.add(start);
    return v;
  }
----

The last point, C, is the most difficult one to find.  However, if you recall that the angles of an equilateral triangle are all sixty degrees, this makes it a little bit easier.  If we know how to find point B with a [klass]*PVector* one-third the length of the line, what if we were to rotate that same [klass]*PVector* sixty degrees and move along that vector from point B?  We’d be at point C!

[[chapter08_figure18]]
image::imgs/chapter08/ch08_18.png[alt="Figure 8.18"]

[source,java]
----
  PVector kochC() {
    // Start at the beginning.
    PVector a = start.get();
    
    PVector v = PVector.sub(end, start);
    // Move 1/3rd of the way to point B.
    v.div(3);
    a.add(v);

    // Rotate “above” the line 60 degrees.
    v.rotate(-radians(60));
    // Move along that vector to point C.
    a.add(v);

    return a;
  }   
----

Putting it all together, if we call [function]*generate()* five times in [function]*setup()*, we’ll see the following result.

image::imgs/chapter08/ch08_ex05.png[canvas="processingjs/chapter08/_8_05_Koch/_8_05_Koch.pde processingjs/chapter08/_8_05_Koch/KochFractal.pde processingjs/chapter08/_8_05_Koch/Kochline.pde",classname="screenshot"]

[[chapter08_example5]]
[example]*Example 8.5: Koch curve* 

[source,java]
----
ArrayList<KochLine> lines;

void setup() {
  size(600, 300);
  background(255);
  lines = new ArrayList<KochLine>();
  PVector start = new PVector(0, 200);
  PVector end   = new PVector(width, 200);
  lines.add(new KochLine(start, end));

  // Arbitrarily apply the Koch rules five times.
  for (int i = 0; i < 5; i++) {
    generate();
  }
}
----

.Exercise 8.2
==============================
image::imgs/chapter08/ch08_exc02.png[classname="half-width-right"]

Draw the Koch snowflake (or some other variation of the Koch curve).

image::imgs/blank.png[]
==============================

.Exercise 8.3
==============================
Try animating the Koch curve.  For example, can you draw it from left to right?  Can you vary the visual design of the line segments?  Can you move the line segments using techniques from earlier chapters?  What if each line segment were made into a spring (toxiclibs) or joint (box2d)?
==============================

.Exercise 8.4
==============================
Rewrite the Cantor set example using objects and an [klass]*ArrayList*.
==============================

.Exercise 8.5
==============================
Draw the Sierpiński triangle (as seen in Wolfram elementary CA) using recursion.

image::imgs/chapter08/ch08_exc05.png[]

==============================

[[chapter08_section5]]
=== 8.5  Trees
((("fractals","trees and")))((("natural fractals")))((("natural phenomenons","trees and")))((("stochastic fractals","trees as")))((("trees")))
The fractals we have examined in this chapter so far are deterministic, meaning they have no randomness and will always produce the identical outcome each time they are run.   They are excellent demonstrations of classic fractals and the programming techniques behind drawing them, but are too precise to feel _natural_.  In this next part of the chapter, I want to examine some techniques behind generating a stochastic (or non-deterministic) fractal.   The example we’ll use is a branching tree.  Let’s first walk through the steps to create a deterministic version.  Here are our production rules:

[[chapter08_figure19]]
image::imgs/chapter08/ch08_19.png[alt="Figure 8.19"]

Again, we have a nice fractal with a recursive definition: A branch is a line with two branches connected to it.  

image::imgs/chapter08/ch08_ex06.png[canvas="processingjs/chapter08/_8_06_Tree_static/_8_06_Tree_static.pde",classname="screenshot"]
((("2D transformations tutorial (Processing)")))((("fractals","transformation matrix (Processing)")))((("popMatrix() function (Processing)")))((("pushMatrix() function (Processing)")))((("transformation matrix (Processing)")))
The part that is a bit more difficult than our previous fractals lies in the use of the word *_rotate_* in the fractal’s rules.   Each new branch must rotate relative to the previous branch, which is rotated relative to all its previous branches.  Luckily for us, Processing has a mechanism to keep track of rotations for us—the *_transformation matrix_*.  If you aren’t familiar with the functions [function]*pushMatrix()* and [function]*popMatrix()*, I suggest you read the online Processing tutorial 2D Transformations (http://processing.org/learning/transform2d/[Transform 2D]), which will cover the concepts you’ll need for this particular example.

Let’s begin by drawing a single branch, the trunk of the tree.    Since we are going to involve the [function]*rotate()* function, we’ll need to make sure we are continuously translating along the branches while we draw the tree.  And since the root starts at the bottom of the window (see above), the first step requires translating to that spot:

[source,java]
----
translate(width/2,height);
----

[[chapter08_figure20]]
image::imgs/chapter08/ch08_20.png[classname="half-width-right-border",alt="Figure 8.20"]

...followed by drawing a line upwards (Figure 8.20):

[source,java]
----
line(0,0,0,-100);
----

Once we’ve finished the root, we just need to translate to the end and rotate in order to draw the next branch.  (Eventually, we’re going to need to package up what we’re doing right now into a recursive function, but let’s sort out the steps first.)

[[chapter08_figure21]]
image::imgs/chapter08/ch08_21.png[alt="Figure 8.21"]

Remember, when we rotate in Processing, we are always rotating around the point of origin, so here the point of origin must always be translated to the end of our current branch.

[source,java]
----
translate(0,-100);
rotate(PI/6);
line(0,0,0,-100);
----

Now that we have a branch going to the right, we need one going to the left.  We can use [function]*pushMatrix()* to save the transformation state before we rotate, letting us call [function]*popMatrix()* to restore that state and draw the branch to the left.  Let’s look at all the code together.

[[chapter08_figure22]]
image::imgs/chapter08/ch08_22.png[alt="Figure 8.22", classname="two-col"]
[[chapter08_figure23]]
image::imgs/chapter08/ch08_23.png[alt="Figure 8.23", classname="two-col"]

[source,java]
----
translate(width/2,height);
// The root
line(0,0,0,-100);
translate(0,-100);

pushMatrix();
rotate(PI/6);
// Branch to the right.
line(0,0,0,-100);
popMatrix();

rotate(-PI/6);
// Branch to the left.
line(0,0,0,-100);
----

If you think of each call to the function [function]*line()* as a “branch,” you can see from the code above that we have implemented our definition of branching as a line that has two lines connected to its end.  We could keep adding more and more calls to [function]*line()* for more and more branches, but just as with the Cantor set and Koch curve, our code would become incredibly complicated and unwieldy.   Instead, we can use the above logic as our foundation for writing a recursive function, replacing the direct calls to line() with our own function called [function]*branch()*.  Let’s take a look.

[[chapter08_example6]]
[example]*Example 8.6: Recursive tree*

[source,java]
----
void branch() {
  // Draw the branch itself.
  line(0, 0, 0, -100);
  // Translate to the end.
  translate(0, -100);

  pushMatrix();    
  // Rotate to the right and branch again.
  rotate(PI/6);
  branch();      
  popMatrix();

  pushMatrix();
  // Rotate to the left and branch again.
  rotate(-PI/6);
  branch();
  popMatrix();
}
----

Notice how in the above code we use [function]*pushMatrix()* and [function]*popMatrix()* around each subsequent call to [function]*branch()*.   This is one of those elegant code solutions that feels almost like magic.  Each call to [function]*branch()* takes a moment to remember the location of that particular branch.    If you turn yourself into Processing for a moment and try to follow the recursive function with pencil and paper, you’ll notice that it draws all of the branches to the right first.   When it gets to the end, [function]*popMatrix()* will pop us back along all of the branches we’ve drawn and start sending branches out to the left. 

.Exercise 8.6
==============================
image::imgs/chapter08/ch08_exc06.png[]

Emulate the Processing code in <<chapter08_example6, Example 8.6>> and number the branches in the above diagram in the order that Processing would actually draw each one.
==============================

You may have noticed that the recursive function we just wrote would not actually draw the above tree.  After all, it has no exit condition and would get stuck in infinite recursive calls to itself.   You’ll also probably notice that the branches of the tree get shorter at each level.   Let’s look at how we can shrink the length of the lines as the tree is drawn, and stop branching once the lines have become too short.

[source,java]
----
// Each branch now receives 
// its length as an argument.
void branch(float len) {

  line(0, 0, 0, -len);
  translate(0, -len);

  // Each branch’s length 
  // shrinks by two-thirds.
  len *= 0.66;

  if (len > 2) {
    pushMatrix();    
    rotate(theta);   
    // Subsequent calls to branch() 
    // include the length argument.
    branch(len);
    popMatrix();     

    pushMatrix();
    rotate(-theta);
    branch(len);
    popMatrix();
  }
}
----

We’ve also included a variable for theta that allows us, when writing the rest of the code in [function]*setup()* and [function]*draw()*, to vary the branching angle according to, say, the [var]*mouseX* location.

image::imgs/chapter08/ch08_ex06a.png[classname="three-col"]
image::imgs/chapter08/ch08_ex06b.png[classname="three-col"]
image::imgs/chapter08/ch08_ex06c.png[classname="three-col"]

[[chapter08_example7]]
[example]*Example 8.7: Recursive tree* 

[source,java]
----
float theta;   

void setup() {
  size(300, 200);
}

void draw() {
  background(255);
  // Pick an angle according to 
  // the mouse location.
  theta = map(mouseX,0,width,0,PI/2);

  // The first branch starts at the 
  // bottom of the window.
  translate(width/2, height);
  stroke(0);
  branch(60);
}
----

.Exercise 8.7
==============================
Vary the [function]*strokeWeight()* for each branch.  Make the root thick and each subsequent branch thinner.

image::imgs/chapter08/ch08_exc07.png[classname="screenshot"]
==============================


.Exercise 8.8
==============================
The tree structure can also be generated using the [klass]*ArrayList* technique demonstrated with the Koch curve.  Recreate the tree using a [var]*Branch* object and an [klass]*ArrayList* to keep track of the branches.  Hint: you’ll want to keep track of the branch directions and lengths using vector math instead of Processing transformations.
==============================

.Exercise 8.9
==============================
Once you have the tree built with an [klass]*ArrayList* of [var]*Branch* objects, animate the tree’s growth.  Can you draw leaves at the end of the branches?
==============================

The recursive tree fractal is a nice example of a scenario in which adding a little bit of randomness can make the tree look more natural.  Take a look outside and you’ll notice that branch lengths and angles vary from branch to branch, not to mention the fact that branches don’t all have exactly the same number of smaller branches.   First, let’s see what happens when we simply vary the angle and length.  This is a pretty easy one, given that we can just ask Processing for a random number each time we draw the tree.

image::imgs/chapter08/ch08_ex07a.png[canvas="processingjs/chapter08/_8_07_TreeStochastic_angleonly/_8_07_TreeStochastic_angleonly.pde",classname="screenshot"]

[source,java]
----
void branch(float len) {
  // Start by picking a random 
  // angle for each branch.
  float theta = random(0,PI/3);

  line(0, 0, 0, -len);
  translate(0, -len);
  len *= 0.66;
  if (len > 2) {
    pushMatrix();    
    rotate(theta);   
    branch(len);
    popMatrix();     
    pushMatrix();
    rotate(-theta);
    branch(len);
    popMatrix();
  }
}
----

In the above function, we always call [function]*branch()* twice.  But why not pick a random number of branches and call [function]*branch()* that number of times?

image::imgs/chapter08/ch08_ex07b.png[canvas="processingjs/chapter08/_8_07_TreeStochastic/_8_07_TreeStochastic.pde",classname="screenshot"]

[[chapter08_example8]]
[example]*Example 8.8: Stochastic tree* 

[source,java]
----
void branch(float len) {
  
  line(0, 0, 0, -len);
  translate(0, -len);
  
  if (len > 2) {

    // Call branch() a random 
    // number of times. 
    int n = int(random(1,4));
    for (int i = 0; i < n; i++) {
      
      // Each branch gets its own random angle.
      float theta = random(-PI/2, PI/2);
      pushMatrix();     
      rotate(theta);
      branch(h);
      popMatrix();
    }
  }
----

.Exercise 8.10
==============================
Set the angles of the branches of the tree according to Perlin noise values.  Adjust the noise values over time to animate the tree.  See if you can get it to appear as if it is blowing in the wind.
==============================

.Exercise 8.11
==============================
Use toxiclibs to simulate tree physics.  Each branch of the tree should be two particles connected with a spring.  How can you get the tree to stand up and not fall down?
==============================

[[chapter08_section6]]
=== 8.6  L-systems
((("fractals","L-systems and")))((("L-systems")))((("Lindenmayer systems")))((("Lindenmayer, Aristid")))((("natural phenomenons","L-systems and")))
In 1968, Hungarian botanist Aristid Lindenmayer developed a grammar-based system to model the growth patterns of plants.    L-systems (short for Lindenmayer systems) can be used to generate all of the recursive fractal patterns we’ve seen so far in this chapter.   We don’t need L-systems to do the kind of work we’re doing here; however, they are incredibly useful because they provide a mechanism for keeping track of fractal structures that require complex and multi-faceted production rules.

In order to create an example that implements L-systems in Processing, we are going to have to be comfortable with working with (a) recursion, (b) transformation matrices, and (c) strings.    So far we’ve worked with recursion and transformations, but strings are new here.  We will assume the basics, but if that is not comfortable for you, I would suggest taking a look at the Processing tutorial “Strings and Drawing text,” available here: http://www.processing.org/learning/text/[Strings and Drawing Text]

An L-system involves three main components:
((("alphabet (L-system component)")))((("L-systems","components of")))((("natural phenomenons","plant growth, modeling")))((("plant growth, modeling")))
- *_Alphabet._*  An L-system’s alphabet is comprised of the valid characters that can be included.  For example, we could say the alphabet is “ABC”, meaning that any valid “sentence” (a string of characters) in an L-system can only include these three characters.
((("axiom (L-system component)")))
- *_Axiom._*  The axiom is a sentence (made up with characters from the alphabet) that describes  the initial state of the system.  For example, with the alphabet “ABC”, some example axioms are “AAA” or “B” or “ACBAB”.
((("rules (L-system component)")))
- *_Rules._*  The rules of an L-system are applied to the axiom and then applied recursively, generating new sentences over and over again.  An L-system rule includes two sentences,a “predecessor” and a “successor.”  For example, with the Rule “A —> AB”, whenever an “A” is found in a string, it is replaced with “AB.”

Let’s begin with a very simple L-system.  (This is, in fact, Lindenmayer’s original L-system for modeling the growth of algae.)

[[chapter08_figure24]]
image::imgs/chapter08/ch08_24.png[alt="Figure 8.24: And so on and so forth...",classname="half-width-right"]

*_Alphabet:_* A B + 
*_Axiom:_*  A + 
*_Rules:_*  (A —> AB)  (B —> A)

As with our recursive fractal shapes, we can consider each successive application of the L-system rules to be a generation.  Generation 0 is, by definition, the axiom.

Let’s look at how we might create these generations with code.  We’ll start by using a [klass]*String* object to store the axiom.

[source,java]
----
String current = "A";
----

And once again, just as we did with the Game of Life and the Koch curve [klass]*ArrayList* examples, we will need an entirely separate string to keep track of the “next” generation.
[source,java]
----
String next = "";
----

Now it’s time to apply the rules to the current generation and place the results in the next.  

[source,java]
----
for (int i = 0; i < current.length(); i++) {
  char c = current.charAt(i);
  // Production rule A --> AB
  if (c == 'A') {
    next += "AB";
  // Production rule B --> A
  } else if (c == 'B') {
    next += "A";
  }
}
----

And when we’re done, current can become next.

[source,java]
----
current = next;
----

To be sure this is working, let’s package it into a function and and call it every time the mouse is pressed.

image::imgs/chapter08/ch08_ex08.png[classname="screenshot"]

[[chapter08_example9]]
[example]*Example 8.9: Simple L-system sentence generation* 

[source,java]
----
// Start with an axiom.
String current = "A";
// Let’s keep track of how many generations.
int count = 0;

void setup() {
  println("Generation " + count + ": " + current);
}

void draw() {
}

void mousePressed() {
  String next = "";
  // Traverse the current String and make the new one.
  for (int i = 0; i < current.length(); i++) {
    char c = current.charAt(i);
    if (c == 'A') {
      next += "AB";
    }  else if (c == 'B') {
      next += "A";
    }
  }
  current = next;
  count++;
  println("Generation " + count + ": " + current);
}
----

Since the rules are applied recursively to each generation, the length of the string grows exponentially.   By generation #11, the sentence is 233 characters long; by generation #22, it is over 46,000 characters long.   The Java [klass]*String* class, while convenient to use, is a grossly inefficient data structure for concatenating large strings.   A [klass]*String* object is “immutable,” which means once the object is created it can never be changed.  Whenever you add on to the end of a [klass]*String* object, Java has to make a brand new [klass]*String* object (even if you are using the same variable name).

[source,java]
----
String s = "blah";
s += "add some more stuff";
----
((("StringBuffer class")))((("strings","StringBuffer class vs.")))
In most cases, this is fine, but why duplicate a 46,000-character string if you don’t have to?   For better efficiency in our L-system examples, we’ll use the [klass]*StringBuffer* class, which is optimized for this type of task and can easily be converted into a string after concatenation is complete.

[source,java]
----
  // A StringBuffer for the “next” sentence
  StringBuffer next = new StringBuffer();
  for (int i = 0; i < current.length(); i++) {
    char c = current.charAt(i);
    if (c == 'A') {
      // append() instead of +=
      next.append("AB");
    } else if (c == 'B') {
      next.append("A");
    }
  }
  // StringBuffer can easily be converted 
  // back to a String.
  current = next.toString();
----

You may find yourself wondering right about now: what exactly is the point of all this?  After all, isn’t this a chapter about _drawing_ fractal patterns?   Yes, the recursive nature of the L-system sentence structure seems relevant to the discussion, but how exactly does this model plant growth in a visual way?

What we’ve left unsaid until now is that embedded into these L-system sentences are instructions for drawing.   Let’s see how this works with another example.

[formula]*Alphabet: A*  + 
[formula]*Axiom:  A* + 
[formula]*Rules:  (A +++&#8594;+++ ABA)  (B +++&#8594;+++ BBB)*

To read a sentence, we’ll translate it in the following way:

[formula]*A:  Draw a line forward.* + 
[formula]*B:  Move forward without drawing.*

Let’s look at the sentence of each generation and its visual output.

[formula]*Generation 0: A* + 
[formula]*Generation 1: ABA* + 
[formula]*Generation 2: ABABBBABA* + 
[formula]*Generation 3: ABABBBABABBBBBBBBBABABBBABA*
((("Cantor set","L-systems and")))
Look familiar?  This is the Cantor set generated with an L-system.

[[chapter08_figure25]]
image::imgs/chapter08/ch08_25.png[alt="Figure 8.25"]

The following alphabet is often used with L-systems: “FG+-[]”, meaning:

[formula]*F:  Draw a line and move forward* + 
[formula]*G:  Move forward (without drawing a line)* + 
[formula]*+:  Turn right* + 
[formula]*-:  Turn left* + 
[formula]*[:  Save current location* + 
[formula]*]:  Restore previous location*
((("turtle graphics")))
This type of drawing framework is often referred to as “Turtle graphics” (from the old days of LOGO programming).   Imagine a turtle sitting on your computer screen to which you could issue a small set of commands: turn left, turn right, draw a line, etc.  Processing isn’t set up to operate this way by default, but by using [function]*translate()*, [function]*rotate()*, and [function]*line()*, we can emulate a Turtle graphics engine fairly easily.
((("L-systems","translating into code")))
Here’s how we would translate the above L-system alphabet into Processing code.

[formula]*F:  line(0,0,0,len); translate(0,len);* + 
[formula]*G:  translate(0,len);* + 
[formula]*+:  rotate(angle);* + 
[formula]*-:  rotate(-angle);* + 
[formula]*[:  pushMatrix();* + 
[formula]*]:  popMatrix();*

Assuming we have a sentence generated from the L-system, we can walk through the sentence character by character and call the appropriate function as outlined above.

[source,java]
----
for (int i = 0; i < sentence.length(); i++) {

  // Looking at each character one at a time
  char c = sentence.charAt(i);

  //[full] Performing the correct task for each character. 
  // This could also be written with a “case” statement, 
  // which might be nicer to look at, but leaving it as an 
  // if/else if structure helps readers not familiar with case statements.
  if (c == 'F') {
    line(0,0,len,0);
    translate(len,0);
  } else if (c == 'F') {
   translate(len,0);
  } else if (c == '+') {
    rotate(theta);
  } else if (c == '-') {
    rotate(-theta);
  } else if (c == '[') {
    pushMatrix();
  } else if (c == ']') {
    popMatrix();
  }
  //[end]
} 
----

The next example will draw a more elaborate structure with the following L-system.

[formula]*Alphabet:   FG+-[]* +
[formula]*Axiom:  F* + 
[formula]*Rules:  F --> FF+[+F-F-F]-[-F+F+F]*

The example available for download on the book’s website takes all of the L-system code provided in this section and organizes it into three classes:

- [mono]*Rule*:  A class that stores the predecessor and successor strings for an L-system rule.
- [mono]*L-system*: A class to iterate a new L-system generation (as demonstrated with the [klass]*StringBuffer* technique).
- [mono]*Turtle*: A class to manage reading the L-system sentence and following its instructions to draw on the screen.

We won’t write out these classes here since they simply duplicate the code we’ve already worked out in this chapter. However, let’s see how they are put together in the main tab.

image::imgs/chapter08/ch08_ex09.png[classname="screenshot"]

[[chapter08_example10]]
[example]*Example 8.10: LSystem*

[source,java]
----
LSystem lsys;
Turtle turtle;

void setup() {
  size(600,600);
  
  // A ruleset is an array of Rule objects.
  Rule[] ruleset = new Rule[1];
  ruleset[0] = new Rule('F',"FF+[+F-F-F]-[-F+F+F]");
  
  // The L-system is created with an axiom and a ruleset.
  lsys = new LSystem("F",ruleset);

  //[offset-down] The Turtle graphics renderer is given a sentence,
  // a starting length, and an angle for rotations.
  turtle = new Turtle(lsys.getSentence(),width/4,radians(25));
}

void draw() {
  background(255);  
  // Start at the bottom of the window and draw.
  translate(width/2,height);
  turtle.render();
}

void mousePressed() {
  // Generate a new sentence when the mouse is pressed.
  lsys.generate();
  turtle.setToDo(lsys.getSentence());

  // The length shrinks each generation.
  turtle.changeLen(0.5);
}
----

.Exercise 8.12
==============================
Use an L-system as a set of instructions for creating objects stored in an [klass]*ArrayList*.  Use trigonometry and vector math to perform the rotations instead of matrix transformations (much like we did in the KochCurve example).
==============================
((("_The Algorithmic Beauty of Plants_ (Prusinkiewicz/Lindenmayer)")))((("Lindenmayer, Aristid")))((("Prusinkiewicz, Przemyslaw")))
.Exercise 8.13
==============================
The seminal work in L-systems and plant structures, _The Algorithmic Beauty of Plants_ by Przemyslaw Prusinkiewicz and Aristid Lindenmayer, was published in 1990.  It is available for free in its entirety online at: http://algorithmicbotany.org/papers/#abop.  Chapter 1 describes many sophisticated L-systems with additional drawing rules and available alphabet characters.  In addition, it describes several methods for generating stochastic L-systems.   Expand the L-system example to include one or more additional features described by Prusinkiewicz and Lindenmayer.
==============================

.Exercise 8.14
==============================
In this chapter, we emphasized using fractal algorithms for generating visual patterns. However, fractals can be found in other creative mediums.  For example, fractal patterns are evident in Johann Sebastian Bach’s Cello Suite No. 3.  The structure of David Foster Wallace’s novel _Infinite Jest_ was inspired by fractals.  Consider using the examples in this chapter to generate audio or text. 
==============================

[TIP]
.The Ecosystem Project
==============================
Step 7 Exercise:

Incorporate fractals into your ecosystem.  Some possibilities:

- Add plant-like creatures to the ecosystem environment.
- Let’s say one of your plants is similar to a tree.  Can you add leaves or flowers to the end of the branches?   What if the leaves can fall off the tree (depending on a wind force)?  What if you add fruit that can be picked and eaten by the creatures?  
- Design a creature with a fractal pattern.
- Use an L-system to generate instructions for how a creature should move or behave.
==============================

