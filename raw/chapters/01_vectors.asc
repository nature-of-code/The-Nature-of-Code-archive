Chapter 1.  Vectors
-------------------

[quote, Captain Oveur (Airplane)]
__________________________________________
“Roger, Roger. What's our vector, Victor?”
__________________________________________
((("vectors")))

This book is all about looking at the world around us and coming up with clever ways to simulate that world with code.  Divided into three parts, the book will start by looking at basic physics—how an apple falls from a tree, a pendulum swings in the air, the earth revolves around the sun, etc.  Absolutely everything contained within the first five chapters of this book requires the use of the most basic building block for programming motion—the *_vector_*.   And so this is where we begin our story.

((("Euclid")))((("Euclidean vector")))((("geometric vector")))((("vectors","defined")))

Now, the word vector can mean a lot of different things. Vector is the name of a new wave rock band formed in Sacramento, CA in the early 1980s.  It’s the name of a breakfast cereal manufactured by Kellogg’s Canada.   In the field of epidemiology, a vector is used to describe an organism that transmits infection from one host to another.  In the C++ programming language, a vector (std::vector) is an implementation of a dynamically resizable array data structure.  While all these definitions are interesting, they’re not what we're looking for.   What we want is called a *_Euclidean vector_* (named for the Greek mathematician Euclid and also known as a geometric vector).  When you see the term “vector” in this book, you can assume it refers to a Euclidean vector defined as _an entity that has both magnitude and direction_.

((("vectors","notation")))

A vector is typically drawn as a arrow; the direction is indicated by where the arrow is pointing, and the magnitude by the length of the arrow itself.

[[chapter01_figure1]]
image::imgs/chapter01/ch01_01.png[alt="Figure 1.1: A vector (drawn as an arrow) has magnitude (length of arrow) and direction (which way it is pointing)",classname="half-width"]

In Figure 1.1, the vector is drawn as an arrow from point A to point B and serves as an instruction for how to travel from A to B.

[[chapter01_section1]]
=== 1.1 Vectors, You Complete Me
((("bouncing ball sketch")))
((("vectors","bouncing ball sketch")))
Before we dive into more of the details about vectors, let’s look at a basic Processing example that demonstrates why we should care about vectors in the first place.  If you’ve read any of the introductory Processing textbooks or taken a class on programming with Processing (and hopefully you’ve done one of these things to help prepare you for this book), you probably, at one point or another, learned to how to write a simple bouncing ball sketch.

image::imgs/chapter01/ch01_ex01.png[classname="screenshot",canvas="processingjs/chapter01/_1_1_bouncingball_novectors/_1_1_bouncingball_novectors.pde",alt="If you are reading this book as a PDF or in print, then you will only see screenshots of the code.  Motion, of course, is a key element of our discussion, so to the extent possible, the static screenshots will include trails to give a sense of the behavior. For more about how to draw trails, see the code examples available for download."]

[[chapter01_example1]]
[example]*Example 1.1: Bouncing ball with no vectors*

[source,java]
----
//[full] Variables for location and speed of ball.
float x = 100;
float y = 100;
float xspeed = 1;
float yspeed = 3.3;
//[end]

//[full] Remember how Processing works?  setup() is executed once when the sketch starts and draw() loops forever and ever (until you quit).
void setup() {
  size(200,200);
  smooth();
  background(255);
}
//[end]

void draw() {
  background(255);
  
  //[full] Move the ball according to its speed.
  x = x + xspeed;
  y = y + yspeed;
  //[end]

  //[full] Check for bouncing.
  if ((x > width) || (x < 0)) {
    xspeed = xspeed * -1;
  }
  if ((y > height) || (y < 0)) {
    yspeed = yspeed * -1;
  }
  //[end]

  stroke(0);
  fill(175);
  // Display the ball at the location (x,y).
  ellipse(x,y,16,16);
}
----

In the above example, we have a very simple world—a blank canvas with a circular shape (a “ball”) traveling around.  This ball has some properties, which are represented in the code as variables.

[NOTE]
=====================================================================
Location:: _x and y_
Speed::    _xspeed and yspeed_
=====================================================================

In a more advanced sketch, we could imagine having many more variables:

[NOTE]
=====================================================================
Acceleration::     _xacceleration and yacceleration_
Target location::  _xtarget and ytarget_
Wind::             _xwind and ywind_
Friction::         _xfriction and yfriction_
===================================================================== 

It’s becoming clearer that for every concept in this world (wind, location, acceleration, etc.), we need two variables.  And this is only a two-dimensional world. In a 3D world, we’ll need [var]*x*, [var]*y*, [var]*z*, [var]*xspeed*, [var]*yspeed*, [var]*zspeed*, and so on.

Wouldn’t it be nice if we could simplify our code and use fewer variables?

Instead of:

[source,java]
----
float x;
float y;
float xspeed;
float yspeed;
----

We could simply have...

[source,java]
----
Vector location;
Vector speed;
----

Taking this first step in using vectors won’t allow us to do anything new.  Just adding vectors won’t magically make your Processing sketches simulate physics. However, they will simplify your code and provide a set of functions for common mathematical operations that happen over and over and over again while programming motion.

As an introduction to vectors, we’re going to live in two dimensions for quite some time (at least until we get through the first several chapters).  All of these examples can be fairly easily extended to three dimensions (and the class we will use — [klass]*PVector* — allows for three dimensions.)  However, it’s easier to start with just two.

[[chapter01_section2]]
=== 1.2 Vectors: for Processing Programmers
((("Processing","vectors and")))((("PVector class (Processing)")))((("vectors","Processing and")))
One way to think of a vector is the difference between two points.   Consider how you might go about providing instructions to walk from one point to another.

Here are some vectors and possible translations:

[[chapter01_figure2]]
image::imgs/chapter01/ch01_02.png[Figure 1.2]

[NOTE]
=====================================================================
(-15, 3):: _Walk fifteen steps west; turn and walk three steps north._
(3, 4):: _Walk three steps east; turn and walk five steps north._
(2, -1):: _Walk two steps east; turn and walk one step south._
===================================================================== 

You’ve probably done this before when programming motion.  For every frame of animation (i.e.  a single cycle through Processing’s [function]*draw()* loop), you instruct each object on the screen to move a certain number of pixels horizontally and a certain number of pixels vertically. 

[[chapter01_figure3]]
image::imgs/chapter01/ch01_03.png[alt="Figure 1.3"]

For every frame:

*_new location = velocity applied to current location_*
((("locations","as vectors")))((("vectors","locations and")))((("vectors","velocity and")))((("velocity","as vector")))
If velocity is a vector (the difference between two points), what is location?   Is it a vector too?  Technically, one might argue that location is not a vector, since it’s not describing how to move from one point to another—it’s simply describing a singular point in space.

Nevertheless, another way to describe a location is the path taken from the origin to reach that location. Hence, a location can be the vector representing the difference between location and origin.

[[chapter01_figure4]]
image::imgs/chapter01/ch01_04.png[Figure 1.4]

Let’s examine the underlying data for both location and velocity.  In the bouncing ball example, we had the following:

[NOTE]
==============================
location:: _x,y_
velocity:: _xspeed,yspeed_
==============================

Notice how we are storing the same data for both—two floating-point numbers, an [var]*x* and a [var]*y*. If we were to write a vector class ourselves, we’d start with something rather basic:

[source,java]
----
class PVector {

  float x;
  float y;

  PVector(float x_, float y_) {
    x = x_;
    y = y_;
  }

}
----

At its core, a [klass]*PVector* is just a convenient way to store two values (or three, as we’ll see in 3D examples). 

And so this ...

[source,java]
----
float x = 100;
float y = 100;
float xspeed = 1;
float yspeed = 3.3;
----

becomes ...

[source,java]
----
PVector location = new PVector(100,100);
PVector velocity = new PVector(1,3.3);
----
((("vectors","motion, implementing with")))
Now that we have two vector objects (location and velocity), we’re ready to implement the algorithm for motion—*_location = location + velocity_*.   In Example 1.1, without vectors, we had:

[source,java]
----
//[full] Add each speed to each location.
x = x + xspeed; 
y = y + yspeed;
//[end]
----

In an ideal world, we would be able to rewrite the above as:

[source,java]
----
// Add the velocity vector to the location vector.
location = location + velocity;
----
((("addition operator")))
However, in Processing, the addition operator + is reserved for primitive values (integers, floats, etc.) only.  Processing doesn’t know how to add two [klass]*PVector* objects together any more than it knows how to add two [klass]*PFont* objects or [klass]*PImage* objects.   Fortunately for us, the [klass]*PVector* class includes functions for common mathematical operations.

[[chapter01_section3]]
=== 1.3 Vector Addition
((("add() function (PVector class)")))((("PVector class (Processing)","function list for","add() function")))((("vectors","adding")))
Before we continue looking at the [klass]*PVector* class and its [function]*add()* method (purely for the sake of learning since it’s already implemented for us in Processing itself), let’s examine vector addition using the notation found in math and physics textbooks.
((("scalar notation, vs. vector notation")))((("vectors","notation, vs. scalar notation")))
Vectors are typically written either in boldface type or with an arrow on top.  For the purposes of this book, to distinguish a *_vector_* from a *_scalar_* (scalar refers to a single value, such as an integer or a floating point number), we’ll use the arrow notation:

- Vector: {vectoru}
- Scalar: {x}

Let’s say I have the following two vectors:

[[chapter01_figure5]]
image::imgs/chapter01/ch01_05.png[Figure 1.5]

Each vector has two components, an [var]*x* and a [var]*y*.  To add two vectors together we simply add both [var]*x*’s and both [var]*y*’s.  

[[chapter01_figure6]]
image::imgs/chapter01/ch01_06.png[Figure 1.6]

In other words:

{wuplusv}

can be written as:

{wxuxplusvx} + 
{wyuyplusvy}

Then, replacing [var]*u* and [var]*v* with their values from Figure 1.6, we get: 

{wx53} + 
{wy24}

which means that:

{wx8}
{wy6}

Finally, we write that as a vector:

{w86}
((("add() function (PVector class)","implementation of")))
Now that we understand how to add two vectors together, we can look at how addition is implemented in the [klass]*PVector* class itself.  Let’s write a function called [function]*add()* that takes another [klass]*PVector* object as its argument.

[source,java]
----
class PVector {

  float x;
  float y;

  PVector(float x_, float y_) {
    x = x_;
    y = y_;
  }
  
  //[full] New! A function to add another PVector to this PVector.  Simply add the <em>x</em> components and the <em>y</em> components together.
  void add(PVector v) { //[bold]
    y = y + v.y; //[bold]
    x = x + v.x; //[bold]
  } //[bold]
  //[end]
}
----
((("bouncing ball sketch","implementing with vectors")))
Now that we see how [function]*add()* is written inside of [klass]*PVector*, we can return to our bouncing ball example with its *_location + velocity_* algorithm and implement vector addition:

[source,java]
----
// Add the current velocity to the location.
location = location + velocity; //[line-through]
location.add(velocity);
----

And here we are, ready to rewrite the bouncing ball example using [klass]*PVector*.

[[chapter01_example2]]
[example]*Example 1.2: Bouncing ball with PVectors!*
[source,java]
----
//[full] Instead of a bunch of floats, we now just have two PVector variables.
PVector location; //[bold]
PVector velocity; //[bold]
//[end]

void setup() {
  size(200,200);
  smooth();
  location = new PVector(100,100); //[bold]
  velocity = new PVector(2.5,5); //[bold]
}

void draw() {
  background(255);
  
  location.add(velocity); //[bold]
((("dot syntax")))((("object oriented programing","dot syntax")))
  //[full] We still sometimes need to refer to the individual components of a PVector and can do so using the dot syntax: location.x, velocity.y, etc.
  if ((location.x > width) || (location.x < 0)) { //[bold]
    velocity.x = velocity.x * -1; //[bold]
  } //[bold]
  if ((location.y > height) || (location.y < 0)) { //[bold]
    velocity.y = velocity.y * -1; //[bold]
  } //[bold]
  //[end]

  stroke(0);
  fill(175);
  ellipse(location.x,location.y,16,16); //[bold]
}
----

Now, you might feel somewhat disappointed.  After all, this may initially appear to have made the code more complicated than the original version.  While this is a perfectly reasonable and valid critique, it’s important to understand that we haven’t fully realized the power of programming with vectors just yet.   Looking at a simple bouncing ball and only implementing vector addition is just the first step.  As we move forward into a more complex world of multiple objects and multiple *_forces_* (which we'll introduce in Chapter 2), the benefits of [klass]*PVector* will become more apparent.

We should, however, note an important aspect of the above transition to programming with vectors.  Even though we are using [klass]*PVector* objects to describe two values—the [var]*x* and [var]*y* of location and the [var]*x* and [var]*y* of velocity—we still often need to refer to the _x_ and _y_ components of each [klass]*PVector* individually.  When we go to draw an object in Processing, there’s no means for us to say:

[source,java]
----
ellipse(location,16,16); //[line-through]
----

The [function]*ellipse()* function does not allow for a [klass]*PVector* as an argument.  An ellipse can only be drawn with two scalar values, an [var]*x*-coordinate and a [var]*y*-coordinate.  And so we must dig into the [klass]*PVector* object and pull out the _x_ and _y_ components using object-oriented dot syntax.

[source,java]
----
ellipse(location.x,location.y,16,16);
----

The same issue arises when testing if the circle has reached the edge of the window, and we need to access the individual components of both vectors: [var]*location* and [var]*velocity*.

[source,java]
----
if ((location.x > width) || (location.x < 0)) {
  velocity.x = velocity.x * -1;
}
----

[[chapter01_exercise1]]
.Exercise 1.1
==================
Find something you’ve previously made in Processing using separate [var]*x* and [var]*y* variables and use [klass]*PVector*++s++ instead.
==================

[[chapter01_exercise2]]
.Exercise 1.2 
==================
Take any of the walker examples from the introduction and convert it to use [klass]*PVector*++s++.
==================

[[chapter01_exercise3]]
.Exercise 1.3 
==================
Extend the bouncing ball with vectors example into 3D.  Can you get a sphere to bounce around a box?
==================

[[chapter01_section4]]
=== 1.4 More Vector Math

Addition was really just the first step.   There are many mathematical operations that are commonly used with vectors.   Below is a comprehensive list of the operations available as functions in the [klass]*PVector* class.  We’ll go through a few of the key ones now.  As our examples get more sophisticated in later chapters, we’ll continue to reveal the details of more functions.
((("angleBetween() function (PVector class)")))((("cross() function (PVector class)")))((("dist() function (PVector class)")))((("dot() function (PVector class)")))((("heading2D() function (PVector class)")))((("lerp() function (PVector class)")))((("limit() function (PVector class)")))((("PVector class (Processing)","function list for")))((("random2D() function (PVector class)")))((("random3D() function (PVector class)")))((("rotate() function (PVector class)")))
- [function]*add()* — add vectors
- [function]*sub()* — subtract vectors
- [function]*mult()* — scale the vector with multiplication
- [function]*div()* — scale the vector with division
- [function]*mag()* — calculate the magnitude of a vector
- [function]*setMag()* - set the magnitude of a vector
- [function]*normalize()* — normalize the vector to a unit length of 1
- [function]*limit()* — limit the magnitude of a vector
- [function]*heading2D()* — the heading of a vector expressed as an angle
- [function]*rotate()* — rotate a 2D vector by an angle
- [function]*lerp()* — linear interpolate to another vector
- [function]*dist()* — the Euclidean distance between two vectors (considered as points)
- [function]*angleBetween()* — find the angle between two vectors
- [function]*dot()* — the dot product of two vectors
- [function]*cross()* — the cross product of two vectors (only relevant in three dimensions)
- [function]*random2D()* - make a random 2D vector
- [function]*random3D()* - make a random 3D vector

Having already covered addition, let’s start with subtraction.  This one’s not so bad; just take the plus sign and replace it with a minus!

==== Vector subtraction
((("PVector class","sub() function")))((("sub() function (PVector class)")))
{wuminusv}

can be written as:

{wxuxminusvx} + 
{wyuyminusvy}

[[chapter01_figure7]]
image::imgs/chapter01/ch01_07.png[Figure 1.7: Vector Subtraction]

and so the function inside [klass]*PVector* looks like:

[source,java]
----
  void sub(PVector v) {
    x = x - v.x;
    y = y - v.y;
  }
----

The following example demonstrates vector subtraction by taking the difference between two points—the mouse location and the center of the window.

image::imgs/chapter01/ch01_ex03.png[canvas="processingjs/chapter01/_1_3_vector_subtraction/_1_3_vector_subtraction.pde",classname="screenshot"]

[[chapter01_example3]]
[example]*Example 1.3: Vector subtraction*

[source,java]
----
void setup() {
  size(200,200);
  smooth();
}

void draw() {
  background(255);
  
  //[full] Two PVectors, one for the mouse location and one for the center of the window.
  PVector mouse  = new PVector(mouseX,mouseY);
  PVector center = new PVector(width/2,height/2);
  //[end]

  // PVector subtraction!
  mouse.sub(center);
  
  // Draw a line to represent the vector.
  translate(width/2,height/2);
  line(0,0,mouse.x,mouse.y);
  
}
----
((("vectors","commutative/associative rules of addition/subtraction with")))
[NOTE]
.Basic Number Properties with Vectors
=====================================================================
Both addition and subtraction with vectors follow the same algebraic rules as with real numbers.

*_The commutative rule:_*  {uplusvvplusu}
 + 
*_The associative rule:_*  {uplusvwuvplusw}

Fancy terminology and symbols aside, this is really quite a simple concept.  We’re just saying that common sense properties of addition apply to vectors as well.  

{3plus2}
 + 
{3plus2plus1}
=====================================================================
((("mult() function (PVector class)")))((("PVector class","mult() function")))((("vectors","multiplying")))((("vectors","scaling")))
Moving on to multiplication, we have to think a little bit differently.  When we talk about multiplying a vector, what we typically mean is *_scaling_* a vector.  If we wanted to scale a vector to twice its size or one-third of its size (leaving its direction the same), we would say: “Multiply the vector by 2” or “Multiply the vector by 1/3.”   Note that we are multiplying a vector by a scalar, a single number, not another vector.

To scale a vector, we multiply each component ([var]*x* and [var]*y*) by a scalar.

==== Vector multiplication

[[chapter01_figure8]]
image::imgs/chapter01/ch01_08.png[classname="half-width-right",alt="Figure 1.8: Scaling a vector"]

{wutimesn}

can be written as:    

{wxtimesn} + 
{wytimesn}

Let’s look at an example with vector notation.

{uequals} + 
{nequals}

{wutimesn} + 
{wxequals} + 
{wyequals}

{wequals}

Therefore, the function inside the [klass]*PVector* class is written as:

[source,java]
----
void mult(float n) {
   //[full] With multiplication, the components of the vector are multiplied by a number.
   x = x * n;
   y = y * n;
   //[end]
 }
----

And implementing multiplication in code is as simple as:
((("mult() function (PVector class)","implementation")))
[source,java]
----
PVector u = new PVector(-3,7);
// This PVector is now three times the size and is equal to (-9,21).
u.mult(3);
----

image::imgs/chapter01/ch01_ex04.png[canvas="processingjs/chapter01/_1_4_vector_multiplication/_1_4_vector_multiplication.pde",classname="screenshot"]

[[chapter01_example4]]
[example]*Example 1.4: Multiplying a vector*

[source,java]
----
void setup() {
  size(200,200);
  smooth();
}

void draw() {
  background(255);
  
  PVector mouse = new PVector(mouseX,mouseY);
  PVector center = new PVector(width/2,height/2);
  mouse.sub(center);
  
  // Multiplying a vector!  The vector is now half its original size (multiplied by 0.5).
  mouse.mult(0.5);  
  
  translate(width/2,height/2);
  line(0,0,mouse.x,mouse.y);
  
}
----

[[chapter01_figure9]]
image::imgs/chapter01/ch01_09.png[alt="Figure 1.9",classname="half-width-right"]
((("div() function (PVector class)")))((("PVector class","div() function")))
Division works just like multiplication—we simply replace the multiplication sign (asterisk) with the division sign (forward slash).

[source,java]
----
void div(float n) {
  x = x / n;
  y = y / n;
}

PVector u = new PVector(8,-4);
// Dividing a vector!  The vector is now half its original size (divided by 2).
u.div(2);
----
((("vectors","associative/distributive rules for multiplication/division of")))
[NOTE]
.More Number Properties with Vectors
=====================================================================
As with addition, basic algebraic rules of multiplication and division apply to vectors.

The associative rule: {nmtimesv1} + 
The distributive rule with 2 scalars, 1 vector: {nmtimesv2} + 
The distributive rule with 2 vectors, 1 scalar: {uvtimesn}
=====================================================================

[[chapter01_section5]]
=== 1.5 Vector Magnitude
((("magnitude (of vectors)")))((("vectors","magnitude")))
Multiplication and division, as we just saw, are means by which the length of the vector can be changed without affecting direction.  Perhaps you’re wondering: “OK, so how do I know what the length of a vector is?  I know the components ([var]*x* and [var]*y*), but how long (in pixels) is the actual arrow?” Understanding how to calculate the length (also known as *_magnitude_*) of a vector is incredibly useful and important.

[[chapter01_figure10]]
image::imgs/chapter01/ch01_10.png[alt="Figure 1.10: The length or “magnitude” of a vector {escvectorv} is often written as: {escmagvectorv}", classname="half-width-right"] 
((("Pythagoras")))((("Pythagorean Theorem")))
Notice in the above diagram how the vector, drawn as an arrow and two components ([var]*x* and [var]*y*), creates a right triangle.  The sides are the components and the hypotenuse is the arrow itself.   We’re very lucky to have this right triangle, because once upon a time, a Greek mathematician named Pythagoras developed a lovely formula to describe the relationship between the sides and hypotenuse of a right triangle.

[[chapter01_figure11]]
image::imgs/chapter01/ch01_11.png[classname="half-width-right",alt="Figure 1.11: The Pythagorean Theorem"]

The Pythagorean theorem is _a_ squared plus _b_ squared equals _c_ squared.

Armed with this formula, we can now compute the magnitude of {vectorv} as follows:

{pythagorean}

or in [klass]*PVector*:

[source,java]
----
float mag() {
  return sqrt(x*x + y*y);
}
----

image::imgs/chapter01/ch01_ex05.png[canvas="processingjs/chapter01/_1_5_vector_magnitude/_1_5_vector_magnitude.pde",classname="screenshot"]

[[chapter01_example5]]
[example]*Example 1.5: Vector magnitude*

[source,java]
----
void setup() {
  size(200,200);
  smooth();
}

void draw() {
  background(255);
  
  PVector mouse = new PVector(mouseX,mouseY);
  PVector center = new PVector(width/2,height/2);
  mouse.sub(center);
((("mag() function (PVector class)")))((("PVector class","mag() function")))
  //[full] The magnitude (i.e. length) of a vector can be accessed via the mag() function.  Here it is used as the width of a rectangle drawn at the top of the window.
  float m = mouse.mag();  
  fill(0);
  rect(0,0,m,10);
  //[end]
  
  translate(width/2,height/2);
  line(0,0,mouse.x,mouse.y);
  
}
----

[[chapter01_section6]]
=== 1.6 Normalizing Vectors
((("normalization")))((("unit vectors")))((("vectors","normalization")))((("vectors","unit vectors")))
Calculating the magnitude of a vector is only the beginning.  The magnitude function opens the door to many possibilities, the first of which is *_[ _*.  Normalizing refers to the process of making something “standard” or, well, “normal.”  In the case of vectors, let’s assume for the moment that a standard vector has a length of 1.  To normalize a vector, therefore, is to take a vector of any length and, keeping it pointing in the same direction, change its length to 1, turning it into what is called a *_unit vector_*.

[[chapter01_figure12]]
image::imgs/chapter01/ch01_12.png[alt="Figure 1.12",classname="half-width-right"]

Since it describes a vector's direction without regard to its length, it's useful to have the unit vector readily accessible.  We’ll see this come in handy once we start to work with forces in Chapter 2. 

For any given vector {unitu}, its unit vector (written as û) is calculated as follows:

{unituformula}

In other words, to normalize a vector, simply divide each component by its magnitude.  This is pretty intuitive.  Say a vector is of length 5.  Well, 5 divided by 5 is 1.  So, looking at our right triangle, we then need to scale the hypotenuse down by dividing by 5.   In that process the sides shrink, divided by 5 as well.
((("normalize() function (PVector class)")))((("PVector class","normalize() function")))
[[chapter01_figure13]]
image::imgs/chapter01/ch01_13.png[alt="Figure 1.13",classname="half-width-right"]

In the [klass]*PVector* class, we therefore write our normalization function as follows:

[source,java]
----
void normalize() {
  float m = mag();
  div(m);
}
----

Of course, there’s one small issue.  What if the magnitude of the vector is 0?  We can’t divide by 0!   Some quick error checking will fix that right up:

[source,java]
----
void normalize() {
 float m = mag();
 if (m != 0) {
   div(m);
 }
}
----

image::imgs/chapter01/ch01_ex06.png[canvas="processingjs/chapter01/_1_6_vector_normalize/_1_6_vector_normalize.pde",classname="screenshot"]

[[chapter01_example6]]
[example]*Example 1.6: Normalizing a vector*

[source,java]
----
void draw() {
  background(255);
  
  PVector mouse = new PVector(mouseX,mouseY);
  PVector center = new PVector(width/2,height/2);
  mouse.sub(center);
  
  // In this example, after the vector is normalized, it is multiplied by 50 so that it is viewable onscreen. Note that no matter where the mouse is, the vector will have the same length (50) due to the normalization process.
  mouse.normalize();
  mouse.mult(50);   
  translate(width/2,height/2);
  line(0,0,mouse.x,mouse.y);
  
}
----

[[chapter01_section7]]
=== 1.7 Vector Motion: Velocity
((("motion")))((("vectors","velocity and")))((("velocity")))
Should we care?  Yes, all this vector math stuff sounds like something we should know about, but why?  How will it actually help us write code?   The truth of the matter is that we need to have some patience.  It will take some time before the awesomeness of using the [klass]*PVector* class fully comes to light.  This is actually a common occurance when first learning a new data structure.   For example, when you first learn about an array, it might seem like much more work to use an array than to just have several variables stand for multiple things.   But that plan quickly breaks down when you need a hundred, or a thousand, or ten thousand things.  The same can be true for [klass]*PVector*.  What might seem like more work now will pay off later, and pay off quite nicely.  And you don’t have to wait too long, as your reward will come in the next chapter.

For now, however, we want to focus on simplicity.  What does it mean to program motion using vectors?   We’ve seen the beginning of this in <<chapter01_example2,Example 1.2>>`:` the bouncing ball.   An object on screen has a location (where it is at any given moment) as well as a velocity (instructions for how it should move from one moment to the next).   Velocity is added to location:

[source,java]
----
location.add(velocity);
----

And then we draw the object at that location:

[source,java]
----
ellipse(location.x,location.y,16,16);
----

This is Motion 101.

. *_Add velocity to location_*
. *_Draw object at location_*
((("Processing","OOP online tutorial")))
In the bouncing ball example, all of this code happened in Processing’s main tab, within [function]*setup()* and [function]*draw()*.   What we want to do now is move towards encapsulating all of the logic for motion inside of a *_class_*. This way, we can create a foundation for programming moving objects in Processing.    In <<intro_section2, Introduction>> Section  section I.2 of the introduction, “The Random Walker Class”, we briefly reviewed the basics of object-oriented-programming (“OOP”).   Beyond that short introduction, this book assumes experience with objects and classes in Processing.   If you need a refresher, I encourage you to check out the online OOP Processing tutorial: http://processing.org/learning/tutorials/objects/[Processing objects tutorial].

In this case, we’re going to create a generic [klass]*Mover* class which will describe a thing moving around the screen.  And so we must consider the following two questions:

. *_What data does a mover have?_*
. *_What functionality does a mover have?_*

Our Motion 101 algorithm tells us the answers to these questions.  A [klass]*Mover* object has two pieces of data: [var]*location* and [[var]*velocity*, two [klass]*PVector* objects.

[source,java]
----
class Mover {
  
  PVector location;
  PVector velocity;
----

Its functionality is just about as simple.  The [klass]*Mover* needs to move and it needs to be seen.  We’ll implement these needs as functions named [function]*update()* and [function]*display()*.  [function]*update()* is where we’ll put all of our motion logic code and [function]*display()* is where we will draw the object.

[source,java]
----
  void update() {
    // The Mover moves.
    location.add(velocity); 
  }

  void display() {
    stroke(0);
    fill(175);
    // The Mover is displayed.
    ellipse(location.x,location.y,16,16); 
  }

}
----
((("class (Processing)","constructor")))((("constructor")))
We’ve forgotten one crucial item, however: the object’s *_constructor_*.  The constructor is a special function inside of a class that creates the instance of the object itself. It is where you give instructions on how to set up the object.  It always has the same name as the class and is called by invoking the *_new_* operator: 

[source,java]
----
  Mover m = new Mover();
----

In our case, let’s arbitrarily decide to initialize our [klass]*Mover* object by giving it a random location and a random velocity.

[source,java]
----
  Mover() {
    location = new PVector(random(width),random(height));
    velocity = new PVector(random(-2,2),random(-2,2));
  }
----

If object-oriented programming is at all new to you, one aspect here may seem a bit confusing.  After all, we spent the beginning of this chapter discussing the [klass]*PVector* class.  The [klass]*PVector* class is the template for making the [klass]*location* object and the [klass]*velocity* object.  So what are they doing inside of yet another object, the [klass]*Mover* object?   In fact, this is just about the most normal thing ever.  An object is simply something that holds data (and functionality).  That data can be numbers (integers, floats, etc.) or other objects!  We’ll see this over and over again in this book.   For example, in <<chapter04_section1, Chapter 4>> we’ll write a class to describe a system of particles.  That [klass]*ParticleSystem* object will have as its data a list of [klass]*Particle* objects. . .and each [klass]*Particle* object will have as its data several [klass]*PVector* objects!

Let’s finish off the [klass]*Mover* class by incorporating a function to determine what the object should do when it reaches the edge of the window.  For now let’s do something simple, and just have it wrap around the edges.

[source,java]
----
  void checkEdges() {

    //[full] When it reaches one edge, set location to the other.
    if (location.x > width) {   
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }

    if (location.y > height) {
      location.y = 0;
    } else if (location.y < 0) {
      location.y = height;
    }
    //[end]

  }
----

Now that the [klass]*Mover* class is finished, we can look at what we need to do in our main program.  We first declare a [klass]*Mover* object:

[source,java]
----
Mover mover;
----

Then initialize the mover in [function]*setup()*:

[source,java]
----
mover = new Mover(); 
----

and call the appropriate functions in [function]*draw()*:

[source,java]
----
mover.update();
mover.checkEdges();
mover.display();
----

Here is the entire example for reference:

image::imgs/chapter01/ch01_ex07.png[canvas="processingjs/chapter01/_1_7_motion101/_1_7_motion101.pde processingjs/chapter01/_1_7_motion101/Mover.pde",classname="screenshot"]

[[chapter01_example7]]
[example]*Example 1.7: Motion 101 (velocity)*

[source,java]
----
// Declare Mover object.
Mover mover;      

void setup() {
  size(200,200);
  smooth();
  // Create Mover object.
  mover = new Mover();  
}

void draw() {
  background(255);
  
  //[full] Call functions on Mover object.
  mover.update();   
  mover.checkEdges();
  mover.display(); 
  //[end]
}

class Mover {

  //[full] Our object has two PVectors: location and velocity.
  PVector location;   
  PVector velocity;
  //[end]

  Mover() {
    location = new PVector(random(width),random(height));
    velocity = new PVector(random(-2,2),random(-2,2));
  }

  void update() {
    // Motion 101: Location changes by velocity.
    location.add(velocity); 
  }

  void display() {
    stroke(0);
    fill(175);
    ellipse(location.x,location.y,16,16);
  }

  void checkEdges() {
    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }
    
    if (location.y > height) {
      location.y = 0;
    } else if (location.y < 0) {
      location.y = height;
    }
  }
}
----

[[chapter01_section8]]
=== 1.8 Vector Motion: Acceleration
((("acceleration")))((("vectors","acceleration")))((("velocity","acceleration")))
OK. At this point, we should feel comfortable with two things: (1) what a [klass]*PVector* is and (2) how we use [klass]*PVector*++s++ inside of an object to keep track of its location and movement.  This is an excellent first step and deserves a mild round of applause.   Before standing ovations and screaming fans, however, we need to make one more, somewhat bigger step forward.   After all, watching the Motion 101 example is fairly boring—the circle never speeds up, never slows down, and never turns.  For more interesting motion, for motion that appears in the real world around us, we need to add one more [klass]*PVector* to our class—[var]*acceleration*.

The strict definition of *_acceleration_* we’re using here is: the rate of _change of velocity_.  Let’s think about that definition for a moment.  Is this a new concept?  Not really.  Velocity is defined as _the rate of change of location_.  In essence, we are developing a “trickle down” effect.  Acceleration affects velocity, which in turn affects location (for some brief foreshadowing, this point will become even more crucial in the next chapter, when we see how forces affect acceleration, which affects velocity, which affects location.)  In code, this reads:  

[source,java]
----
velocity.add(acceleration);
location.add(velocity);
----

As an exercise, from this point forward, let’s make a rule for ourselves.  Let’s write every example in the rest of this book without ever touching the value of velocity and location (except to initialize them).  In other words, our goal now for programming motion is: Come up with an algorithm for how we calculate acceleration and let the trickle-down effect work its magic.   (In truth, you’ll find reasons to break this rule, but it’s important to illustrate the principles behind our motion algorithm.)  And so we need to come up with some ways to calculate acceleration:

==== Acceleration Algorithms!
((("acceleration","algorithms for")))((("acceleration algorithms")))
. _A constant acceleration_
. _A totally random acceleration_
. _Acceleration towards the mouse_
((("acceleration algorithms","constant")))
Algorithm #1, _a constant acceleration_, is not particularly interesting, but it is the simplest and will help us begin incorporating acceleration into our code.   The first thing we need to do is add another [klass]*PVector* to the [klass]*Mover* class:

[source,java]
----
class Mover {

  PVector location;
  PVector velocity;
  // A new PVector for acceleration
  PVector acceleration;  //[bold]
----

And incorporate acceleration into the [function]*update()* function:

[source,java]
----
 void update() {
    //[full] Our motion algorithm is now two lines of code!
    velocity.add(acceleration); //[bold]
    location.add(velocity);
    //[end]
 }
----

We’re almost done.  The only missing piece is initialization in the constructor.  

[source,java]
----
  Mover() {
----

Let’s start the [klass]*Mover* object in the middle of the window... 

[source,java]
----
    location = new PVector(width/2,height/2);
----

...with an initial velocity of zero.

[source,java]
----
    velocity = new PVector(0,0);
----

This means that when the sketch starts, the object is at rest.  We don’t have to worry about velocity anymore, as we are controlling the object’s motion entirely with acceleration.  Speaking of which, according to Algorithm #1, our first sketch involves constant acceleration.  So let’s pick a value.

[source,java]
----
    acceleration = new PVector(-0.001,0.01);
  }
----

Maybe you’re thinking, “Gosh, those values seem awfully small!”   That’s right, they are quite tiny.  It’s important to realize that our acceleration values (measured in pixels) accumulate over time in the velocity, about thirty times per second depending on our sketch’s frame rate.   And so to keep the magnitude of the velocity vector within a reasonable range, our acceleration values should remain quite small.   We can also help this cause by incorporating the [klass]*PVector* function [function]*limit()*.
((("limit() function (PVector class)")))((("magnitude (of vectors)","limiting")))((("PVector class","limit() function")))((("velocity","limiting")))
[source,java]
----
// The limit() function constrains the magnitude of a vector.
velocity.limit(10); 
----

This translates to the following:

_What is the magnitude of velocity?  If it’s less than 10, no worries; just leave it as is.  If it’s more than 10, however, reduce it to 10!_

[[chapter01_exercise4]]
.Exercise 1.4
==================
Write the [function]*limit()* function for the [klass]*PVector* class.

[source,java]
----
  void limit(float max) {
    if (_______ > _______) {
      _________();
      ____(max);
    }
  }
----
==================

Let’s take a look at the changes to the [klass]*Mover* class, complete with [function]*acceleration* and [function]*limit()*.

image::imgs/chapter01/ch01_ex08.png[canvas="processingjs/chapter01/_1_8_motion101_acceleration/_1_8_motion101_acceleration.pde processingjs/chapter01/_1_8_motion101_acceleration/Mover.pde",classname="screenshot"]

[[chapter01_example8]]
[example]*Example 1.8: Motion 101 (velocity and constant acceleration)*

[source,java]
----
class Mover {

  PVector location;
  PVector velocity;
  // Acceleration is the key!
  PVector acceleration;
  // The variable topspeed will limit the magnitude of velocity. 
  float topspeed;    

  Mover() {
    location = new PVector(width/2,height/2);
    velocity = new PVector(0,0);
    acceleration = new PVector(-0.001,0.01);
    topspeed = 10;
  }

  void update() {
    //[full] Velocity changes by acceleration and is limited by topspeed.
    velocity.add(acceleration); 
    velocity.limit(topspeed);
    //[end]
    location.add(velocity);    
  }
  
  // display() is the same.
  void display() {}
  // checkEdges() is the same.
  void checkEdges() {}
}
----

[[chapter01_exercise5]]
.Exercise 1.5
==================
Create a simulation of a car (or runner) that accelerates when you press the up key and brakes when you press the down key. 
==================
((("acceleration algorithms","random")))
Now on to Algorithm #2, _a totally random acceleration_.  In this case, instead of initializing acceleration in the object’s constructor, we want to pick a new acceleration each cycle, i.e. each time [function]*update()* is called.

image::imgs/chapter01/ch01_ex09.png[canvas="processingjs/chapter01/_1_9_motion101_acceleration/_1_9_motion101_acceleration.pde processingjs/chapter01/_1_9_motion101_acceleration/Mover.pde",classname="screenshot"]

[[chapter01_example9]]
[example]*Example 1.9: Motion 101 (velocity and random acceleration)*

[source,java]
----
  void update() {
    
    // the random2D() function will give us a PVector of length one pointing in a random direction
    acceleration = PVector.random2D();
    
    velocity.add(acceleration);
    velocity.limit(topspeed);
    location.add(velocity);
  }
----

Because the random vector is a normalized one, we can try scaling it:

  (a) scaling the acceleration to a constant value

[source,java]
----
acceleration = PVector.random2D();
// Constant
acceleration.mult(0.5); //[bold]
----

  (b) scaling the acceleration to a random value

[source,java]
----
acceleration = PVector.random2D();
// Random
acceleration.mult(random(2)); //[bold]
----

While this may seem like an obvious point, it’s crucial to understand that acceleration does not merely refer to the _speeding up_ or _slowing down_ of a moving object, but rather _any change_ in velocity in either magnitude or direction.   Acceleration is used to steer an object, and we’ll see this again and again in future chapters as we begin to program objects that make decisions about how to move about the screen.

[[chapter01_exercise6]]
.Exercise 1.6
==================
Referring back to the <<intro_section6, Introduction>>, implement acceleration according to Perlin noise.
==================

[[chapter01_section9]]
=== 1.9 Static vs. Non-Static Functions
((("functions","static vs. non-static")))((("methods, static vs. non-static")))((("Processing","static vs. non-static methods")))
Before we get to Algorithm #3 (_accelerate towards the mouse_), we need to cover one more rather important aspect of working with vectors and the [klass]*PVector* class: the difference between using *_static_* methods and *_non-static_* methods.

Forgetting about vectors for a moment, take a look at the following code:

[source,java]
----
float x = 0;
float y = 5;

x = x + y;
----

Pretty simple, right?  [var]*x* has the value of 0, we add [var]*y* to it, and now [var]*x* is equal to 5.  We could write the corresponding code pretty easily based on what we’ve learned about [klass]*PVector*.

[source,java]
----
PVector v = new PVector(0,0);
PVector u = new PVector(4,5);
v.add(u);
----

The vector [var]*v* has the value of (0,0), we add [var]*u* to it, and now [var]*v* is equal to (4,5).  Easy, right?

Let’s take a look at another example of some simple floating point math:

[source,java]
----
float x = 0;
float y = 5;

float z = x + y;
----

[var]*x* has the value of 0, we add [var]*y* to it, and store the result in a new variable [var]*z*.   The value of [var]*x* does not change in this example (neither does [var]*y*)!  This may seem like a trivial point, and one that is quite intuitive when it comes to mathematical operations with floats.   However, it’s not so obvious with mathematical operations in [klass]*PVector*.  Let’s try to write the code based on what we know so far.

[source,java]
----
PVector v = new PVector(0,0);
PVector u = new PVector(4,5);
// Don’t be fooled; this is incorrect!!!
PVector w = v.add(u); //[line-through]
----

The above might seem like a good guess, but it’s just not the way the [klass]*PVector* class works.   If we look at the definition of [function]*add()* . . .

[source,java]
----
void add(PVector v) {
    x = x + v.x;
    y = y + v.y;
 }
----

we see that this code does not accomplish our goal.  First, it does not return a new [klass]*PVector* (the return type is “void”) and second, it changes the value of the [klass]*PVector* upon which it is called.  In order to add two [klass]*PVector* objects together and return the result as a new [klass]*PVector*, we must use the static [function]*add()* function.  
((("static functions")))
Functions that we call from the class name itself (rather than from a speciﬁc object instance) are known as *_static functions_*.   Here are two examples of function calls that assume two [klass]*PVector* objects, [var]*v* and [var]*u*:

[source,java]
----
// Static: called from the class name.
PVector.add(v,u);
// Not static: called from an object instance.
v.add(u);
----
Since you can’t write static functions yourself in Processing, you might not have encountered them before.  [klass]*PVector*'s static functions allow us to perform generic mathematical operations on [klass]*PVector* objects without having to adjust the value of one of the input [klass]*PVector*++s++.  Let’s look at how we might write the static version of [function]*add()*:

[source,java]
----
  //[offset-up] The static version of add allows us to add two PVectors together and assign the result to a new PVector while leaving the original PVectors (v and u) intact.
  static PVector add(PVector v1, PVector v2) {
    PVector v3 = new PVector(v1.x + v2.x, v1.y + v2.y);
    return v3;
  }
----

There are several differences here:

- The function is labeled as *_static_*.
- The function does not have a *_void_* return type, but rather returns a [klass]*PVector*.
- The function creates a new [klass]*PVector* (v3) and returns the sum of the components of [var]*v1* and [var]*v2* in that new [klass]*PVector*.

When you call a static function, instead of referencing an actual object instance, you simply reference the name of the class itself.

[source,java]
----
PVector v = new PVector(0,0);
PVector u = new PVector(4,5);
PVector w = v.add(u); //[line-through]
PVector w = PVector.add(v,u); //[bold]
----

The [klass]*PVector* class has static versions of [function]*add()*, [function]*sub()*, [function]*mult()*, and [function]*div()*.

[[chapter01_exercise7]]
.Exercise 1.7
==================
Translate the following pseudocode to code using static or non-static functions where appropriate.

- The [klass]*PVector* [var]*v* equals (1,5)
- The [klass]*PVector* [var]*u* equals [var]*v* multiplied by 2.
- The [klass]*PVector* [var]*w* equals [var]*v* minus [var]*u*.
- Divide the [klass]*PVector* w by 3.

[source,java]
----
PVector v = new PVector(1,5);
PVector u = ________._____(__,__);
PVector w = ________._____(__,__);
___________;
----
==================

[[chapter01_section10]]
=== 1.10 Interactivity with Acceleration
((("acceleration algorithms","interactive")))
[[chapter01_figure14]]
image::imgs/chapter01/ch01_14.png[alt="Figure 1.14",classname="half-width-right"]

To finish out this chapter, let’s try something a bit more complex and a great deal more useful.  We’ll dynamically calculate an object’s acceleration according to a rule stated in Algorithm #3 — _the object accelerates towards the mouse_.

Anytime we want to calculate a vector based on a rule or a formula, we need to compute two things: *_magnitude_* and *_direction_*.  Let’s start with direction.  We know the acceleration vector should point from the object’s location towards the mouse location.  Let’s say the object is located at the point ([var]*x*,[var]*y*) and the mouse at ([var]*mouseX*,[var]*mouseY*).  

[[chapter01_figure15]]
image::imgs/chapter01/ch01_15.png[alt="Figure 1.15",classname="half-width-right"]

In Figure 1.15, we see that we can get a vector ([var]*dx*,[var]*dy*) by subtracting the object’s location from the mouse’s location.   

 - [formula]*dx = mouseX - x*
 - [formula]*dy = mouseY - y*

Let’s rewrite the above using [klass]*PVector* syntax.   Assuming we are in the [klass]*Mover* class and thus have access to the object’s [klass]*PVector location*, we then have:

[source,java]
----
PVector mouse = new PVector(mouseX,mouseY);
// Look! We’re using the static reference to sub() because we want a new PVector pointing from one point to another.
PVector dir = PVector.sub(mouse,location);
----

We now have a [klass]*PVector* that points from the mover's location all the way to the mouse.  If the object were to actually accelerate using that vector, it would appear instantaneously at the mouse location.  This does not make for good animation, of course, and what we want to do now is decide how quickly that object should accelerate toward the mouse.

In order to set the magnitude (whatever it may be) of our acceleration [klass]*PVector*, we must first _________________________________ that direction vector.  That’s right, you said it.  _Normalize_.   If we can shrink the vector down to its unit vector (of length one) then we have a vector that tells us the direction and can easily be scaled to any value.   One multiplied by anything equals anything. 

[source,java]
----
float anything = ?????
dir.normalize();
dir.mult(anything);
----

To summarize, we take the following steps:

. Calculate a vector that points from the object to the target location (mouse)
. Normalize that vector (reducing its length to 1)
. Scale that vector to an appropriate value (by multiplying it by some value)
. Assign that vector to acceleration

And here are those steps in the update() function itself:

image::imgs/chapter01/ch01_ex10.png[canvas="processingjs/chapter01/_1_10_motion101_acceleration/_1_10_motion101_acceleration.pde processingjs/chapter01/_1_10_motion101_acceleration/Mover.pde",classname="screenshot"]

[[chapter01_example10]]
[example]*Example 1.10: Accelerating towards the mouse*

[source,java]
----
 void update() {

    PVector mouse = new PVector(mouseX,mouseY);
    // Step 1: Compute direction
    PVector dir = PVector.sub(mouse,location);
    
    // Step 2: Normalize
    dir.normalize();
    
    // Step 3: Scale
    dir.mult(0.5);
    
    // Step 4: Accelerate
    acceleration = dir;

    velocity.add(acceleration);
    velocity.limit(topspeed);
    location.add(velocity);

  }
----

You may be wondering why the circle doesn’t stop when it reaches the target.  It’s important to note that the object moving has no knowledge about trying to stop at a destination; it only knows where the destination is and tries to go there as quickly as possible. Going as quickly as possible means it will inevitably overshoot the location and have to turn around, again going as quickly as possible towards the destination, overshooting it again, and so on and so forth.   Stay tuned; in later chapters we’ll learn how to program an object to *_arrive_* at a location (slow down on approach).

This example is remarkably close to the concept of gravitational attraction (in which the object is attracted to the mouse location).  Gravitational attraction will be covered in more detail in the next chapter. However, one thing missing here is that the strength of gravity (magnitude of acceleration) is inversely proportional to distance.  This means that the closer the object is to the mouse, the faster it accelerates. 

[[chapter01_exercise8]]
.Exercise 1.8
==================
Try implementing the above example with a variable magnitude of acceleration, stronger when it is either closer or farther away.
==================

Let’s see what this example would look like with an array of movers (rather than just one).

image::imgs/chapter01/ch01_ex11.png[canvas="processingjs/chapter01/_1_11_motion101_acceleration_array/_1_11_motion101_acceleration_array.pde processingjs/chapter01/_1_11_motion101_acceleration_array/Mover.pde",classname="screenshot"]

[[chapter01_example11]]
[example]*Example 1.11: Array of movers accelerating towards the mouse*

[source,java]
----
// An array of objects
Mover[] movers = new Mover[20];    

void setup() {
  size(200,200);
  smooth();
  background(255);
  for (int i = 0; i < movers.length; i++) {
    // Initialize each object in the array.
    movers[i] = new Mover();
  }
}

void draw() {
  background(255);

  for (int i = 0; i < movers.length; i++) {
    //[full] Calling functions on all the objects in the array
    movers[i].update();
    movers[i].checkEdges();
    movers[i].display(); 
    //[end]
  }
}

class Mover {

  PVector location;
  PVector velocity;
  PVector acceleration;
  float topspeed;

  Mover() {
    location = new PVector(random(width),random(height));
    velocity = new PVector(0,0);
    topspeed = 4;
  }

  void update() {

    // <b><u>Our algorithm for calculating acceleration</b></u>: 

    //[full] Find the vector pointing towards the mouse.
    PVector mouse = new PVector(mouseX,mouseY);
    PVector dir = PVector.sub(mouse,location);
    //[end]
    // Normalize.
    dir.normalize();
    // Scale.
    dir.mult(0.5);
    // Set to acceleration.
    acceleration = dir;

    //[full] Motion 101! Velocity changes by acceleration.  Location changes by velocity.
    velocity.add(acceleration);
    velocity.limit(topspeed);
    location.add(velocity);
    //[end]
  }

  void display() {
    stroke(0);
    fill(175);
    ellipse(location.x,location.y,16,16);
  }

  void checkEdges() {

    if (location.x > width) {
      location.x = 0;
    } else if (location.x < 0) {
      location.x = width;
    }

    if (location.y > height) {
      location.y = 0;
    }  else if (location.y < 0) {
      location.y = height;
    }
  }
}
----

[[chapter01_figure16]]
image::imgs/chapter01/ch01_16.png[classname="screenshot",alt="Figure 1.16: The Ecosystem Project"]

[TIP]
.Ecosystem Project
==================
As mentioned in the preface, one way to use this book is to build a single project over the course of reading it, incorporating elements from each chapter one step at a time.  We’ll follow the development of an example project throughout this book— a simulation of an ecosystem.  Imagine a population of computational creatures swimming around a digital pond, interacting with each other according to various rules.

Step 1 Exercise:

Develop a set of rules for simulating the real-world behavior of a creature, such as a nervous fly, swimming fish, hopping bunny, slithering snake, etc.  Can you control the object’s motion by only manipulating the acceleration?  Try to give the creature a personality through its behavior (rather than through its visual design).
