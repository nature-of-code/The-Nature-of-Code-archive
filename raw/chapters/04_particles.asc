Chapter 4.  Particle Systems
----------------------------

[quote, Spock]
____________________________________________________________________
“That is wise. Were I to invoke logic, however, logic clearly dictates that the needs of the many outweigh the needs of the few.” 
____________________________________________________________________

In 1982, William T. Reeves, a researcher at Lucasfilm Ltd., was working on the film “Star Trek II: The Wrath of Khan.”   Much of the movie revolves around the Genesis Device, a torpedo that when shot at a barren, lifeless planet has the ability to reorganize matter and create a habitable world for colonization. During the sequence, a wall of fire ripples over the planet while it is being “terraformed.”   The term “particle system,” an incredibly common and useful technique in computer graphics, was coined in the creation of this particular effect.

_“A particle system is a collection of many many minute particles that together represent a fuzzy object. Over a period of time, particles are generated into a system, move and change from within the system, and die from the system.”_
—William Reeves, “Particle Systems—a Technique for Modeling a Class of Fuzzy Objects,” _ACM Transactions on Graphics_ 2:2 (April 1983), p. 92.  

Since the early 1980s, particle systems have been used in countless video games, animations, digital art pieces, and installations to model various irregular types of natural phenomena, such as fire, smoke, waterfalls, fog, grass, bubbles, and so on.   

This chapter will be dedicated to looking at implementation strategies for coding a particle system. How do we organize our code? Where do we store information related to individual particles vs. information related to the system as a whole?  The examples we’ll look at focus on managing the data associated with a particle system. The examples will use simple shapes for the particles and apply only the most basic behaviors (gravity, etc.). However, by using this framework and building in more interesting ways to render the particles and compute behaviors, you can achieve a variety of effects.

[[chapter04_section1]]
=== 4.1 Why We Need Particle Systems

We’ve defined a particle system to be a collection of independent objects, often represented by a simple shape or dot.  Why does this matter?    Certainly, the prospect of modeling some of the phenomena we listed (explosions!) is attractive and potentially useful.  But really, there’s an even better reason for us to concern ourselves with particle systems.  If we want to get anywhere in this nature of code life, we’re going to need to work with systems of _many_ things.   We’re going to want to look at balls bouncing, birds flocking, ecosystems evolving, all sorts of things in plural. 

Just about every chapter after this one is going to need to deal with a list of objects.  Yes, we’ve done this with an array in some of our first vector and forces examples.   But we need to go where no array has gone before.

First, we’re going to want to deal with flexible quantities of elements.  Sometimes we’ll have zero things, sometimes one thing, sometimes ten things, and sometimes ten thousand things. Second, we’re going to want to take a more sophisticated object-oriented approach.  Instead of simply writing a class to describe a single Particle, we’re also going to want to write a class that describes the collection of particles, the Particle System itself.   The goal here is to be able to write a main program that looks like the following:

[source,java]
----
// Ah, isn’t this main program so simple and lovely?
ParticleSystem ps;

void setup() {
  size(200,200);
  ps = new ParticleSystem();
}

void draw() {
  background(255);
  ps.run();
}
----

No single Particle is ever referenced in the above code, yet the result will be full of particles flying all over the screen.   Getting used to writing Processing sketches with multiple classes, and classes that keep lists of instances of other classes, will prove very useful as we get to more advanced chapters in this book.

Finally, working with Particle Systems is also a good excuse for us to tackle two other advanced object-oriented programming techniques: inheritance and polymorphism.   With the examples we’ve seen up until now, we’ve always had an array of a single type of object: “Movers” or “Oscillators.”  With inheritance (and polymorphism), we’ll see a convenient way to store a single list that contains objects of different types.  This way, a Particle System need not only be a system of a single type of particle.

Though it may seem obvious to you, I’d also like to point out that there are typical implementations of particle systems, and that’s where we will begin in this chapter.   However, the fact that the particles in this chapter look or behave a certain way should not limit your imagination.   Just because particle systems tend to look sparkly, fly forward, and fall with gravity doesn’t mean that’s how you should make yours.  

The focus here is really just how to keep track of a system of many elements.  What those elements do and how those elements look is up to you.

[[chapter04_section2]]
=== 4.2 A Single Particle

Before we can get rolling on the system itself, we’ve got to work on writing the class to describe a single particle.  The good news: we’ve done this already.    Our [klass]*Mover* class from Chapter 2 serves as the perfect template.  For us, a particle is an independent body that moves about the screen.  It has [var]*location*, [var]*velocity*, and [var]*acceleration*, a constructor to initialize those variables, and functions to [function]*display()* itself and [function]*update()* its location.

[source,java]
----
class Particle {
  // A “Particle” object is just another name for our “Mover.”
  // It has location, velocity, and acceleration.
  PVector location;
  PVector velocity;
  PVector acceleration;

  Particle(PVector l) {
    location = l.get();
    acceleration = new PVector();
    velocity = new PVector();
  }

  void update() {
    velocity.add(acceleration);
    location.add(velocity);
  }

  void display() {
    stroke(0);
    fill(175);
    ellipse(location.x,location.y,8,8);
  }  
}
----

This is about as simple as a particle can get.  From here, we could take our particle in several directions.  We could add an [function]*applyForce()* function to affect the particle’s behavior (we’ll do precisely this in a future example.)  We could add variables to describe color and shape, or reference a [klass]*PImage* to draw the particle.   For now, however, let’s focus on adding just one additional detail: *_lifespan_*.

Typical particle systems involve something called an *_emitter_*.  The emitter is the source of the particles and controls the initial settings for the particles, location, velocity, etc.  An emitter might emit a single burst of particles, or a continuous stream of particles, or both.  The point is that for a typical implementation such as this, a particle is born at the emitter but does not live forever.  If it were to live forever, our Processing sketch would eventually grind to a halt as the number of particles increases to an unwieldy number over time.   As new particles are born, we need old particles to die.  This creates the illusion of an infinite stream of particles, and the performance of our program does not suffer.   There are many different ways we could decide when a particle dies.  For example, it could come into contact with another object, or it could simply leave the screen.   For our first Particle class, however, we’re simply going to add a “lifespan” variable.   The timer will start at 255 and count down to 0, when the particle will be considered “dead.”  And so we expand the Particle class as follows:

[source,java]
----
class Particle {
  PVector location;
  PVector velocity;
  PVector acceleration;
  // A new variable to keep track of how long the particle 
  // has been “alive”
  float lifespan; // [bold]

  Particle(PVector l) {
    location = l.get();
    acceleration = new PVector();
    velocity = new PVector();
    // We start at 255 and count down for convenience
    lifespan = 255; // [bold]
  }

  void update() {
    velocity.add(acceleration);
    location.add(velocity);
    // Lifespan decreases
    lifespan -= 2.0; // [bold]
  }

  void display() {
    // Since our life ranges from 255 to 0 we can use it for alpha
    stroke(0,lifespan); // [bold]
    fill(175,lifespan); // [bold]
    ellipse(location.x,location.y,8,8);
  }  
}
----

The reason we chose to start the lifespan at 255 and count down to 0 is for convenience.  With those values, we can assign lifespan to act as the alpha transparency for the ellipse as well.   When the particle is “dead” it will also have faded away onscreen.

With the addition of the lifespan variable, we’ll also need one additional function —a function that can be queried (for a true or false answer) as to whether the particle is alive or dead.  This will come in handy when we are writing the ParticleSystem class, whose task will be to manage the list of particles themselves.  Writing this function is pretty easy; we just need to check and see if the value of lifespan is less than zero.  If it is we _return true_, if not we _return false_.

[source,java]
----
  boolean isDead() {
    if (lifespan < 0.0) {
      // Is the particle still alive?
      return true;
    } else {
      return false;
    }
  } 
----

Before we get to the next step of making many particles, it’s worth taking a moment to make sure our Particle works correctly and create a sketch with one single Particle object.  Here is the full code below, with two small additions.  We add a convenience function called [function]*run()* that simply calls both [function]*update()* and [function]*display()* for us.  In addition, we give the Particle a random initial velocity as well as a downward acceleration (to simulate gravity).

image::imgs/chapter04/ch04_ex01.png[canvas="processingjs/chapter04/_4_01_SingleParticle/_4_01_SingleParticle.pde processingjs/chapter04/_4_01_SingleParticle/Particle.pde",classname="screenshot"]

[[chapter04_example1]]
[example]*Example 4.1: A single particle*

[source,java]
----
Particle p;

void setup() {
  size(200,200);
  p = new Particle(new PVector(width/2,10));
  smooth();
}

void draw() {
  background(255);
  // Operating the single Particle
  p.run();
  if (p.isDead()) {
    println("Particle dead!");
  }
}

class Particle {
  PVector location;
  PVector velocity;
  PVector acceleration;
  float lifespan;

  Particle(PVector l) {
    //[offset-up] For demonstration purposes we assign the Particle an initial velocity and constant acceleration.
    acceleration = new PVector(0,0.05);
    velocity = new PVector(random(-1,1),random(-2,0));
    location = l.get();
    lifespan = 255.0;
  }

  // Sometimes it’s convenient to have a “run” 
  // function that calls all the other functions we need.
  void run() {
    update();
    display();
  }

  void update() {
    velocity.add(acceleration);
    location.add(velocity);
    lifespan -= 2.0;
  }

  void display() {
    stroke(0,lifespan);
    fill(0,lifespan);
    ellipse(location.x,location.y,8,8);
  }
  
  // Is the Particle alive or dead?
  boolean isDead() {
    if (lifespan < 0.0) {
      return true;
    } else {
      return false;
    }
  }
}
----

[[chapter04_exercise1]]
.Exercise 4.1
==============================
Rewrite the example so that the Particle can respond to force vectors via an applyForce() function.
==============================

[[chapter04_exercise2]]
.Exercise 4.2
==============================
Add angular velocity (rotation) to the Particle.  Create your own non-circle Particle design.
==============================

Now that we have a class to describe a single Particle, we’re ready for the next big step.  How do we keep track of many particles, when we can’t ensure exactly how many particles we might have at any given time?

[[chapter04_section3]]
=== 4.3 The ArrayList

In truth, we could use a simple array to manage our Particle objects.  Some particle systems might have a fixed number of particles, and arrays are magnificently efficient in those instances.  Processing also offers [function]*expand()*, [function]*contract()*, [function]*subset()*, [function]*splice()*, and other methods for resizing arrays.   However, for these examples, we’re going to take a more sophisticated approach and use the Java class ArrayList (found in the java.util package: http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html[ArrayList Documentation]).  Using an ArrayList follows the same idea as using a standard array, but with different syntax. The following two code examples (which assume the existence of a generic Particle class) produce the same result: first with an array, and second with an ArrayList.    

The standard array way:
[source,java]
----
int total = 10;
Particle[] parray = new Particle[total];

void setup() {
  // This is what we’re used to, accessing elements on
  // the array via an index and brackets—[]
  for (int i = 0; i < parray.length; i++) {
    parray[i] = new Particle();
  }
}

void draw() {
  for (int i = 0; i < parray.length; i++) {
    Particle p = parray[i];
    p.run();
  }
}
----

The new ArrayList way (using Generics!):
[source,java]
----
int total = 10;

//[offset-down] Have you ever seen this syntax before? This is a new feature in Java 1.6 that Processing now supports. It allows us to specify in advance what type of object we intend to put in the ArrayList.
ArrayList<Particle> plist = new ArrayList<Particle>();
void setup() {
  for (int i = 0; i < total; i++) {
    // An object is added to an ArrayList with add().
    plist.add(new Particle());
  }
}

void draw() {
  // The size of the ArrayList is returned by size().
  for (int i = 0; i < plist.size(); i++) {
    // An object is accessed from the ArrayList with
    // get().  Because we are using “Generics,” we do not
    // need to specify a type when we pull objects out of
    // the ArrayList.
    Particle p = plist.get(i);
    p.run();
  }
}
----

This last for loop looks pretty similar to our code that looped through a “regular” array.  We initialize a variable called “i” to 0 and count up by 1, accessing each element of the ArrayList until we get to the end.    However, if you use generics, i.e.

[source,java]
----
ArrayList<Particle> plist = new ArrayList<Particle>();
----

you can write something called an “enhanced for loop.”  It looks like this:

[source,java]
----
for (Particle p: particles) {
  p.run();
}
----

Let’s translate that.  Say “for each” instead of “for” and say “in” instead of “:”.  Now you have:

“For each Particle p in particles, run that Particle p!”

I know.  You cannot contain your excitement.  I can’t.  I know it’s not necessary, but I just have to type that again.

[source,java]
----
// This enhanced loop also works for regular arrays!
for (Particle p : particles) {
  p.run();
}
----

Simple, elegant, concise, lovely.   Take a moment.   Breathe.   I have some bad news.  Yes, we love that enhanced loop and we will get to use it.  But not right now.  Our particle system examples will require a feature that makes using that loop impossible.  Let’s continue.

The code we’ve written above doesn’t take advantage of the ArrayList’s resizability, and it uses a fixed size of 10.   We need to design an example that fits with our particle system scenario, where we emit a continuous stream of Particle objects, adding one new particle with each cycle through [function]*draw()*.   We’ll skip rehashing the Particle class code here, as it doesn’t need to change.

[source,java]
----
ArrayList<Particle> particles;

void setup() {
  size(200,200);
  particles = new ArrayList<Particle>();
}

void draw() {
  background(255);

  //[offset-up] A new Particle object is added to the ArrayList every cycle through draw().
  particles.add(new Particle(new PVector(width/2,50)));

  for (int i = 0; i < particles.size(); i++) {
    Particle p = particles.get(i);
    p.run();
  }
}
----

Run the above code for a few minutes and you’ll start to see the frame rate slow down and down and down until the program grinds to a halt (my tests yielded horrific performance after fifteen minutes.)  The issue of course is that we are creating more and more and more particles without removing any.   

Fortunately, the [klass]*ArrayList* class has a convenient [function]*remove()* function that allows us to delete a Particle (by referencing its index).    This is why we cannot use the new enhanced for loop we just learned; the enhanced loop provides no means for deleting elements while iterating.  Here, we want to call [function]*remove()* when the Particle’s [function]*isDead()* function returns true.

[source,java]
----
  for (int i = 0; i < particles.size(); i++) {
    Particle p = particles.get(i);
    p.run();
    // If the Particle is “dead” we can go ahead and delete it from
    // the list.
    if (p.isDead()) {
      particles.remove(i);
    }
  }
----

Although the above code will run just fine (and the program will never grind to a halt), we have opened up a medium-sized can of worms.  Whenever we manipulate the contents of a list while iterating through that very list, we can get ourselves into trouble.    Take, for example, the following code.

[source,java]
----
  for (int i = 0; i < particles.size(); i++) {
    Particle p = particles.get(i);
    p.run();
    //[offset-up] Adding a new Particle to the list while iterating?
    particles.add(new Particle(new PVector(width/2,50)));
  } 
----

This is a somewhat extreme example (with flawed logic), but it proves the point.  In the above case, for each Particle in the list, we add a new Particle to the list (manipulating the [function]*size()* of the ArrayList).  This will result in an infinite loop as i can never increment past the size of the ArrayList.  

While removing elements from the ArrayList during a loop doesn’t cause the program to crash (as it does with adding), the problem is almost more insidious in that it leaves no evidence.  To discover the problem we must first establish an important fact.  When an object is removed from the ArrayList, all elements are shifted one spot to the left.  Note the diagram below where Particle “C” (index 2) is removed.  Particles A and B keep the same index, while Particles D and E shift from 3 and 4 to 2 and 3, respectively.

[[chapter04_figure1]]
image::imgs/chapter04/ch04_01.png[alt="Figure 4.1"]

Let’s pretend we are [var]*i* looping through the ArrayList.

_when i = 0 -> Check Particle A -> Do not delete_ + 
_when i = 1 -> Check Particle B --> Do not delete_ + 
_when i = 2 -> Check Particle C -> Delete!  Slide Particles D and E back from slots 3,4 to 2,3_ + 
_when i = 3 -> Check Particle E -> Do not delete_

Notice the problem?  We never checked Particle D!  When C was deleted from slot #2, D moved into slot #2, but i already moved on to equal 3.  This is not a disaster given that the next time around, Particle D will get checked. Still, the expectation is that we are writing code to iterate through every single element of the ArrayList.   Skipping an element is unacceptable.

There are two solutions to this problem.   The first solution is to simply iterate through the ArrayList backwards.  If you are sliding elements from right to left as elements are removed, it’s impossible to skip an element by accident.  Here’s how the code would look:

[source,java]
----
  // Looping through the list backwards 
  for (int i = particles.size()-1; i >= 0; i--) { // [bold]
    Particle p = (Particle) particles.get(i);
    p.run();
    if (p.isDead()) {
      particles.remove(i);
    }
  }
----

This is a perfectly fine solution in ninety-nine cases out of a hundred.  But sometimes, the order in which the elements are drawn could be important and you may not want to iterate backwards.  Java provides a special class—[klass]*Iterator*—that takes care of all of the details of iteration for you.  You get to say:

_Hey, I’d like to iterate through this ArrayList.  Could you continue to give me the next element in the list one at a time until we get to the end?  And if I remove elements or move them around in the list while we’re iterating, will you make sure I don’t look at any elements twice or skip any by accident?_

An ArrayList can produce an [klass]*Iterator* object for you.

[source,java]
----
// Note that with the Iterator object, we can also
// use the new <ClassName> generics syntax and
// specify the type that the Iterator will
// reference.
Iterator<Particle> it = particles.iterator();
----
Once you’ve got the [klass]*Iterator*, the [function]*hasNext()* function will tell us whether there is a Particle for us to run and the [function]*next()* function will grab that Particle object itself.  

[source,java]
----
  // An Iterator object doing the iterating for you
  while (it.hasNext()) {
    Particle p = it.next();
    p.run();
  }
----

And if you call the [function]*remove()* function on the [klass]*Iterator* object during the loop, it will delete the current Particle object (and not skip ahead past the next one, as we saw with counting forward through the [klass]*ArrayList*.)

[source,java]
----
  if (p.isDead()) {
    // An Iterator object doing the deleting for you
    it.remove();  		
   }
----

Putting it all together, we have:

image::imgs/chapter04/ch04_ex02.png[canvas="processingjs/chapter04/_4_02_ArrayListParticles/_4_02_ArrayListParticles.pde processingjs/chapter04/_4_02_ArrayListParticles/Particle.pde",classname="screenshot"]

[[chapter04_example2]]
[example]*Example 4.2: ArrayList of particles with iterator*

[source,java]
----
ArrayList particles;

void setup() {
  size(200,200);
  particles = new ArrayList();
}

void draw() {
  background(255);

  particles.add(new Particle(new PVector(width/2,50)));
 
  Iterator it = particles.iterator();
  // Using an Iterator object
  // instead of counting with int i
  while (it.hasNext()) {
    Particle p = it.next();
    p.run();
    if (p.isDead()) {
       it.remove();
    }
  }
}
----

[[chapter04_section4]]
=== 4.4 The Particle System Class

OK, let’s review where we are.  We’ve done two things.  We’ve written a class to describe an individual [klass]*Particle* object.  We’ve conquered the [klass]*ArrayList* and used it to manage a list of many [klass]*Particle* objects (with the ability to add and delete at will).

We could stop here. However, one additional step we can and should take is to write a class to describe the list of [klass]*Particle* objects itself—the [klass]*ParticleSystem* class.  This will allow us to remove the bulky logic of looping through all particles from the main tab, as well as open up the possibility of having more than one particle system.  A system of systems!

If you recall the goal we set at the beginning of this chapter, we wanted our main tab to look like:

[source,java]
----
// Just one wee ParticleSystem!
ParticleSystem ps;

void setup() {
  size(200,200);
  ps = new ParticleSystem();
}

void draw() {
  background(255);
  ps.run();
}
----

Let’s take the code from Example 4.2 and review a bit of object-oriented programming, looking at how each piece from the main tab can fit into the [klass]*ParticleSystem* class.

++++
<table class="code">
<tr>
<th>ArrayList in the main tab</th>
<th>ArrayList in the ParticleSystem class</th>
</tr>
<tr>
<td>
<pre>


<b>ArrayList&lt;Particle&gt; particles;</b>

void setup() {
  size(200,200);
  <b>particles = new ArrayList&lt;Particle&gt;();</b>
}

void draw() {
  background(255);

  <b>particles.add(new Particle());</b>

  

  <b>Iterator it = particles.iterator();
  while (it.hasNext()) {
    Particle p = it.next();
    p.run();
    if (p.isDead()) {
      it.remove();
    }
  }</b>
}
</pre>
</td>
<td>
<pre>
class ParticleSystem {
  <b>ArrayList&lt;Particle&gt; particles;</b>


  ParticleSystem() {
    <b>particles = new ArrayList&lt;Particle&gt;();</b>
  }

  

  void addParticle() {
    <b>particles.add(new Particle());</b>
  }

  void run() {
    <b>Iterator it = particles.iterator();
    while (it.hasNext()) {
      Particle p = it.next();
      p.run();
      if (p.isDead()) {
        it.remove();
      }
    }</b>
  }
}
</pre>
</td>
</tr>
</table>
++++

We could also add some new features to the particle system itself.  For example, it might be useful for the [klass]*ParticleSystem* class to keep track of an origin point where particles are made.  This fits in with the idea of a particle system being an “emitter,” a place where particles are born and sent out into the world.    The origin point should be initialized in the constructor:

[[chapter04_example3]]
[example]*Example 4.3: Simple Single Particle System*

[source,java]
----
class ParticleSystem {
  ArrayList particles;
  // This particular ParticleSystem implementation
  // includes an origin point where each Particle begins.
  PVector origin; // [bold]

  ParticleSystem(PVector location) {
    origin = location.get();
    particles = new ArrayList();
  }

  void addParticle() {
    // The origin is passed to each Particle when it is added.
    particles.add(new Particle(origin)); // [bold]
  }
----

[[chapter04_exercise3]]
.Exercise 4.3
==============================
Make the origin point move dynamically.  Have the particles emit from the mouse location or use the concepts of velocity and acceleration to make the system move autonomously.
==============================

[[chapter04_exercise4]]
.Exercise 4.4
==============================
Building off Chapter 3’s “Asteroids” example, use a particle system to emit particles from the ship’s “thrusters” whenever a thrust force is applied.  The particles’ initial velocity should be related to the ship’s current direction. 
==============================

[[chapter04_section5]]
=== 4.5 A System of Systems

Let’s review for a moment where we are.  We know how to talk about an individual Particle object.  We also know how to talk about a system of Particle objects, and this we call a “particle system.”  And we’ve defined a particle system as a collection of independent objects.  But isn’t a particle system itself an object?   If that’s the case (which it is), there’s no reason why we couldn’t also have a collection of many particle systems, i.e. a system of systems.

This line of thinking could of course take us even further, and you might lock yourself in a basement for days sketching out a diagram of a system of systems of systems of systems of systems of systems.  Of systems.   After all, this is how the world works.  An organ is a system of cells, a human body is a system of organs, a neighborhood is a system of human bodies, a city is a system of neighborhoods, and so on and so forth.   While this is an interesting road to travel down, it’s a bit beyond where we need to be right now.   It is, however, quite useful to know how to write a Processing sketch that keeps track of many particle systems, each of which keep track of many particles.  Let’s take the following scenario.

You start with a blank screen.

image::imgs/chapter04/ch04_ex04a.png[canvas="processingjs/chapter04/_4_04_SystemofSystems/_4_04_SystemofSystems.pde processingjs/chapter04/_4_04_SystemofSystems/Particle.pde processingjs/chapter04/_4_04_SystemofSystems/ParticleSystem.pde",classname="screenshot"]

You click the mouse and generate a particle system at the mouse’s location.

image::imgs/chapter04/ch04_ex04b.png[canvas="processingjs/chapter04/_4_04_SystemofSystems_b/_4_04_SystemofSystems_b.pde processingjs/chapter04/_4_04_SystemofSystems_b/Particle.pde processingjs/chapter04/_4_04_SystemofSystems_b/ParticleSystem.pde",classname="screenshot"]

Each time you click the mouse a new particle system is created at the mouse’s location.

image::imgs/chapter04/ch04_ex04c.png[canvas="processingjs/chapter04/_4_04_SystemofSystems_c/_4_04_SystemofSystems_c.pde processingjs/chapter04/_4_04_SystemofSystems_c/Particle.pde processingjs/chapter04/_4_04_SystemofSystems_c/ParticleSystem.pde",classname="screenshot"]

In Example <<chapter04_example3, 4.3>>, we stored a single reference to a particle system object in the variable [var]*ps*.

[source,java]
----
ParticleSystem ps;

void setup() {
  size(200,200);
  ps = new ParticleSystem(1,new PVector(width/2,50));
}

void draw() {
  background(255);
  ps.run();
  ps.addParticle();
}
----

For this new example, what we want to do instead is create an [klass]*ArrayList* to keep track of multiple instances of particle systems.  When the program starts (i.e. in [function]*setup()*), the ArrayList is empty.

[[chapter04_example4]]
[example]*Example 4.4: System of Systems*

[source,java]
----
// This time the type of thing we are putting 
// in the ArrayList is a ParticleSystem itself!
ArrayList<ParticleSystem> systems;
void setup() {
  size(600,200);
  systems = new ArrayList<ParticleSystem>();
}
----

Whenever the mouse is pressed, a new ParticleSystem object is created and placed into the ArrayList.

[source,java]
----
void mousePressed() {
  systems.add(new ParticleSystem(1,new PVector(mouseX,mouseY)));
}
----

And in [function]*draw()*, instead of referencing a single ParticleSystem, we now look through all the systems in the ArrayList and call [function]*run()* on each of them.

[source,java]
----
void draw() {
  background(255);
  // Since we aren’t deleting elements we 
  // can use our enhanced loop!
  for (ParticleSystem ps: systems) {
    ps.run();
    ps.addParticle();
  }
}
----

[[chapter04_exercise5]]
.Exercise 4.5
==============================
Rewrite example 4.4 so that each ParticleSystem doesn’t live forever.  When a ParticleSystem is empty (i.e. has no Particles left in its ArrayList) remove it from the ArrayList systems.
==============================

[[chapter04_exercise6]]
.Exercise 4.6
==============================
Create a simulation of an object shattering into many pieces. How can you turn one large shape into many small particles? What if there are several large shapes on the screen and they shatter when you click on them?
==============================

[[chapter04_section6]]
=== 4.6 Inheritance and Polymorphism: An Introduction

You may have encountered the terms _inheritance_ and _polymorphism_ in your programming life before this book.  After all, they are two of the three fundamental principles behind the theory of object-oriented programming (the other being _encapsulation_).   If you’ve read other Processing or Java programming books, chances are it’s been covered.   My beginner text, _Learning Processing_, has close to an entire chapter (#22) dedicated to these two topics.  

Still, perhaps you’ve only learned about it in the abstract sense and never had a reason to really use inheritance and polymorphism.  If this is true, you’ve come to the right place.  Without these two topics, your ability to program a variety of particles and particle systems is extremely limited.   (In the next chapter, we’ll also see how understanding these topics will help us to use physics libraries.)

Imagine the following.   It’s a Saturday morning, you’ve just gone out for a lovely jog, had a delicious bowl of cereal, and are sitting quietly at your computer with a cup of warm chamomile tea.  It’s your old friend so and so’s birthday and you’ve decided you’d like to make a greeting card in Processing.  How about some confetti for a birthday?  Purple confetti, pink confetti, star-shaped confetti, square confetti, fast confetti, fluttery confetti, etc.  All of these pieces of confetti with different appearances and different behaviors explode onto the screen at once.

What we’ve got here is clearly a particle system—a collection of individual pieces of confetti (i.e. particles).  We might be able to cleverly design our Particle class to have variables that store its color, shape, behavior, etc.  And perhaps we initialize the values of these variables randomly.   But what if your particles are drastically different? This could become very messy, having all sorts of code for different ways of being a particle in the same class.  Well, you might consider doing the following:

[source,java]
----
class HappyConfetti {

}

class FunConfetti {

}

class WackyConfetti {

}
----

This is a nice solution: we have three different classes to describe the different kinds of pieces of confetti that could be part of our Particle System.   The ParticleSystem constructor could then have some code to pick randomly from the three classes when filling the ArrayList.  Note this probabilistic method is the same one we employed in our random walk examples in the <<intro_section2, Introduction>>.

[source,java]
----
class ParticleSystem {
  ParticleSystem(int num) {
    particles = new ArrayList();
    for (int i = 0; i < num; i++) {
      float r = random(1);
      //[offset-up] Randomly picking a "kind" of particle
      if      (r < 0.33) { particles.add(new HappyConfetti()); }	
      else if (r < 0.67) { particles.add(new FunConfetti());   }
      else               { particles.add(new WackyConfetti()); }
    }
  }
----

OK, we now need to pause for a moment.   We’ve done nothing wrong.   All we wanted to do was wish our friend a happy birthday and enjoy writing some code.  But while the reasoning behind the above approach is quite sound, we’ve opened up two major problems.


[highlight]*Problem #1:  Aren’t we going to be copying/pasting a lot of code between the different “confetti” classes?*

Yes.  Even though our kinds of particles are different enough to merit our breaking them out into separate classes, there is still a ton of code that they will likely share.   They’ll all have PVectors to keep track of location, velocity, and acceleration; an [function]*update()* function that implements our motion algorithm, etc.  

This is where _inheritance_ comes in.  _Inheritance_ allows us to write a class that _inherits_ variables and functions from another class, all the while implementing its own custom features.

[highlight]*Problem #2:  How will the ArrayList know which objects are which type?*

This is a pretty serious problem.  Remember, we were using generics to tell the _ArrayList_ what type of objects we’re going to put inside it.  Are we suddenly going to need three different ArrayLists?

[source,java]
----
ArrayList<HappyConfetti> a1 = new ArrayList<HappyConfetti>();
ArrayList<FunConfetti>   a2 = new ArrayList<FunConfetti>();
ArrayList<WackyConfetti> a3 = new ArrayList<WackyConfetti>();
----

This seems awfully inconvenient, given that we really just want one list to keep track of all the stuff in the ParticleSystem.  That can be made possible with _polymorphism_.  Polymorphism will allow us to consider objects of different types as the same type and store them in a single ArrayList.

Now that we understand the problem, let’s look at these two concepts with a bit more detail and then create a Particle System example that implements both inheritance and polymorphism.

[[chapter04_section7]]
=== 4.7 Inheritance Basics

Let’s take a different example, the world of animals: dogs, cats, monkeys, pandas, wombats, and sea nettles.   We'll start by programming a Dog class.   A Dog object will have an age variable (an integer), as well as [function]*eat()*, [function]*sleep()*, and [function]*bark()* functions. 

[source,java]
----
class Dog {
  int age;
  //[full] Dogs and cats have the same variables (age) and functions (eat, sleep).
  Dog() {
    age = 0;
  } 

  void eat() {
    println("Yum!");
  }

  void sleep() {
    println("Zzzzzz");
  }
  //[end]

  //[full] A unique function for barking.
  void bark() {
    println("WOOF!");
  }
  //[end]
}
----

Now, let's move on to cats.  

[source,java]
----
class Cat {
  int age;

  Cat() {
    age = 0;
  } 

  void eat() {
    println("Yum!");
  }

  void sleep() {
    println("Zzzzzz");
  }

  void meow() {
    println("MEOW!");
  }
}
----

As we rewrite the same code for fish, horses, koala bears, and lemurs, this process will become rather tedious.  Instead, let's develop a generic Animal class that can describe any type of animal.  All animals eat and sleep, after all.  We could then say:

- A dog is an animal and has all the properties of animals and can do all the things animals do. Also, a dog can bark.
- A cat is an animal and has all the properties of animals and can do all the things animals do. Also, a cat can meow.

Inheritance makes this all possible.  With inheritance, classes can inherit properties (variables) and functionality (methods) from other classes.  A Dog class is a child (_subclass_) of an Animal class.  Children will automatically inherit all variables and functions from the parent (_superclass_), but can also include functions and variables not found in the parent.    Like a phylogenetic "tree of life," inheritance follows a tree structure.    Dogs inherit from Canines which inherit from Mammals which inherit from Animals, etc. 

[[chapter04_figure2]]
image::imgs/chapter04/ch04_02.png[alt="Figure 4.2"]

Here is how the syntax works with inheritance.

[source,java]
----
// The Animal class is the parent (or super) class.
class Animal {
  // Dog and Cat inherit the variable age.
  int age;

  Animal() {
    age = 0;
  } 

  // Dog and Cat inherit the functions eat() and sleep().
  void eat() {
    println("Yum!");
  }

  void sleep() {
    println("Zzzzzz");
  }
}

// The Dog class is the child (or sub) class,  
indicated by the code “extends Animal”.
class Dog extends Animal { // [bold]
  Dog() {
    // super() executes code found in the parent class.
    super(); // [bold]
  } 
  // We define bark() in the child class, since it isn't part of the parent class.
  void bark() {
    println("WOOF!");
  }
}

class Cat extends Animal {
  Cat() {
    super();
  } 
  void meow() {
    println("MEOW!");
  }
}
----

This brings up two new terms:

- *_extends_* – Used to indicate a parent for the class being defined.  Note that classes can only extend one class.   However, classes can extend classes that extend other classes, i.e.  Dog extends Animal, Retriever extends Dog.  Everything is inherited along the way.
- *_super()_* – Calls the Constructor in the parent class.   In other words, whatever you do in the parent constructor, do the same in the child constructor.   Other code besides [function]*super()* can be written into the constructor.   [function]*super()* can also receive arguments if a parent constructor has been defined with matching arguments.

A subclass can be expanded to include properties and functions beyond what is found in the superclass.  For instance, a Dog object already has an age variable, which is set randomly in the constructor, but let’s assume that it also has a haircolor variable:

[source,java]
----
class Dog extends Animal {
  // A child class can introduce new variables not 
  // included in the parent.   
  color haircolor;
  Dog() {
    super();
    haircolor = color(random(255));
  } 

  void bark() {
    println("WOOF!");
  }
}
----

Note how the parent constructor is called via [function]*super()*, which sets the age to 0, but the haircolor is set inside the Dog constructor itself.    If a Dog object eats differently than a generic Animal, parent functions can be _overridden_ by rewriting the function inside the subclass.

[source,java]
----
class Dog extends Animal {
  color haircolor;
   
  Dog() {
     super();
     haircolor = color(random(255));
  } 
  
  // A child can override a parent function if necessary.
  void eat() {
    // A Dog's specific eating characteristics
    println("Woof! Woof! Slurp.")
  }

  void bark() {
    println("WOOF!");
  }
}
----

But what if a Dog eats the same way as a generic Animal, just with some extra functionality?  A subclass can both run the code from a parent class and incorporate custom code.

[source,java]
----
class Dog extends Animal {
   color haircolor;
   
   Dog() {
     super();
     haircolor = color(random(255));
   } 
   
   void eat() {
     // Call eat() from Animal
     // A child can execute a function from the parent		
     // while adding its own code.
     super.eat(); // [bold]
     // Add some additional code 
     // for a Dog's specific eating characteristics.
     println("Woof!!!");
   }

   void bark() {
    println("WOOF!");
  }
}
----

[[chapter04_section8]]
=== 4.8 Particles with Inheritance

Now that we've had an introduction to the theory of inheritance and its syntax, we can develop a working example in Processing based on our Particle class.  

Let’s review a simple Particle implementation (further simplified from Example [notetoself]*4.x*):

[source,java]
----
class Particle {
  PVector location;
  PVector velocity;
  PVector acceleration;

  Particle(PVector l) {
    acceleration = new PVector(0,0.05);
    velocity = new PVector(random(-1,1),random(-2,0));
    location = l.get();
  }

  void run() {
    update();
    display();
  }

  void update() {
    velocity.add(acceleration);
    location.add(velocity);
  }

  void display() {
    fill(0);
    ellipse(location.x,location.y,8,8);
  }
}
----

Next, we create a subclass from Particle (let’s call it “Confetti”). It will inherit all the instance variables and methods from Particle. We write a new constructor with the name “Confetti” and execute the code from the parent class by calling [function]*super()*.

[source,java]
----
class Confetti extends Particle {

  // We could add variables for only Confetti here

  Confetti(PVector l) {
    super(l);
  }

  // Inherits update() from parent

  // Override the display method
  void display() {
    rectMode(CENTER);
    fill(175);
    stroke(0);
    rect(location.x,location.y,8,8);
  }
}
----

Let’s make this a bit more sophisticated.  Let’s say we want to have the “Confetti” particle rotate as it flies through the air.  We could, of course, model angular velocity and acceleration as we did in Chapter 3.  Instead, we’ll try a quick and dirty solution.

We know a particle has an x location somewhere between zero and the width of the window.   What if we said: when the particle’s x location is zero, its rotation should be zero; when its x location is equal to the width, its rotation should be equal to two PI?  Does this ring a bell?  Whenever we have a value with one range that we want to map to another range, we can use Processing’s [function]*map()* function!  (See <<intro_section6, Introduction>>.)

[source,java]
----
float angle = map(location.x,0,width,0,TWO_PI);
----

And just to give it a bit more spin, we can actually map the angle’s range from 0 to TWO_PI*2.  Let’s look at how this code fits into the display() function.

[source,java]
----
  void display() {
    rectMode(CENTER);
    fill(0,lifespan);
    stroke(0,lifespan);
    // If we rotate() a shape in Processing, 
    // we need to familiarize ourselves with transformations.  
    // For more, visit: http://processing.org/learning/transform2d/
    pushMatrix();
    translate(location.x,location.y);
    float theta = map(location.x,0,width,0,TWO_PI*2);
    rotate(theta);
    rect(0,0,8,8);
    popMatrix();
  }
----

[[chapter04_exercise7]]
.Exercise 4.7
==============================
Instead of using [function]*map()* to calculate theta, how would you model angular velocity and acceleration?  
==============================

Now that we have a “Confetti” particle that extends our base Particle class, we need to figure out how our Particle System class can manage particles of different types within the same system.  To accomplish this goal, let’s return to the animal kingdom inheritance example and see how the concept extends into the world of polymorphism.

[[chapter04_section9]]
=== 4.9 Polymorphism Basics

Now that we have the concept of inheritance down, we can imagine how we would program a diverse animal kingdom using ArrayLists—an array of dogs, an array of cats, of turtles, of kiwis, etc. frolicking about.

[source,java]
----
//[full] Separate ArrayLists for each animal 
ArrayList<Dog> dogs = new ArrayList<Dog>();  	
ArrayList<Cat> cats = new ArrayList<Cat>();
ArrayList<Turtle> turtles = new ArrayList<Turtle>();
ArrayList<Kiwi> kiwis = new ArrayList<Kiwi>();
//[end]

for (int i = 0; i < 10; i++) {
  dogs.add(new Dog());
}
for (int i = 0; i < 15; i++) {
  cats.add(new Cat());
}
for (int i = 0; i < 6; i++) {
  turtles.add(new Turtle());
}
for (int i = 0; i < 98; i++) {
  kiwis.add(new Kiwi());
}
----

As the day begins, the animals are all pretty hungry and are looking to eat.  So it’s off to looping time (enhanced looping time!)...

[source,java]
----
//[full] Separate loops for each animal
for (Dog d: dogs) {
  d.eat();
}
for (Cat c: cats) {
  c.eat();
}
for (Turtle t: turtles) {
  t.eat();
}
for (Kiwi k: kiwis) {
  k.eat();
}
//[end]
----

This works great, but as our world expands to include many more animal species, we’re going to get stuck writing a lot of individual loops.  Is this really necessary?  After all, the creatures are all animals, and they all like to eat.  Why not just have one ArrayList of “Animal” objects and fill it with all different _kinds_ of Animals?

[source,java]
----
//[offset-down] Just one ArrayList for all the animals!
ArrayList<Animal> kingdom = new ArrayList<Animal>();

for (int i = 0; i < 1000; i++) {
  if (i < 100) kingdom.add(new Dog());
  else if (i < 400) kingdom.add(new Cat());
  else if (i < 900) kingdom.add(new Turtle());
  else kingdom.add(new Kiwi());
}

for (Animal a: kingdom) {
  a.eat();
}
----

The ability to treat a Dog object as either a member of the Dog class or the Animal class (its parent) is an example of polymorphism.  Polymorphism (from the Greek _polymorphos_, meaning many forms) refers to the treatment of a single instance of an object in multiple forms.    A Dog is certainly a Dog, but since Dog extends Animal, it can also be considered an Animal.  In code, we can refer to it both ways.

[source,java]
----
Dog rover = new Dog();
Animal spot = new Dog();
----

Although the second line of code might initially seem to violate syntax rules, both ways of declaring a Dog object are legal.  Even though we declare spot as a Animal, we’re really making a Dog object and storing it in the spot variable.  And we can safely call all of the Animal methods on spot because the rules of inheritance dictate that a Dog can do anything an Animal can.   

What if the Dog class, however, overrides the [function]*eat()* function in the Animal class?  Even if spot is declared as an Animal, Java will determine that its true identity is that of a Dog and run the appropriate version of the [function]*eat()* function.

This is particularly useful when we have an array or ArrayList.   

[[chapter04_section10]]
=== 4.10 Particle Systems with Polymorphism

Let’s pretend for a moment that polymorphism doesn’t exist and rewrite a Particle System class to include many Particle objects and many Confetti objects.

[source,java]
----
class ParticleSystem {
  //[full] We’re stuck doing everything twice with two lists!
  ArrayList<Particle> particles; // [bold]
  ArrayList<Confetti> confetti; // [bold]
  //[end]
  PVector origin;

  ParticleSystem(PVector location) {
    origin = location.get();
    particles = new ArrayList<Particle>(); // [bold]
    confetti = new ArrayList<Confetti>(); // [bold]
  }

  void addParticle() {
    particles.add(new Particle(origin)); // [bold]
    particles.add(new Confetti(origin)); // [bold]
  }

  void run() {
    Iterator it = particles.iterator(); // [bold]
    while (it.hasNext()) {
      Particle p = it.next();
      p.run();
      if (p.isDead()) {
        it.remove();
      }
    }
    it = confetti.iterator(); // [bold]
    while (it.hasNext()) {
      Confetti c = it.next();
      c.run();
      if (c.isDead()) {
        it.remove();
      }
    }

  }
}
----

Notice how we have two separate lists, one for Particle objects and one for Confetti objects.  Every action we want to perform we have to do twice!   Polymorphism allows us to simplify the above by just making one ArrayList of Particle objects that contains both standard Particle objects as well as Confetti objects.  We don’t have to worry about which are which; this will all be taken care of for us!  (Also, note that the code for the main program and the classes has not changed so we aren’t including it here.  See website for full example.)

image::imgs/chapter04/ch04_ex05.png[canvas="processingjs/chapter04/_4_05_ParticleSystemInheritancePolymorphism/_4_05_ParticleSystemInheritancePolymorphism.pde processingjs/chapter04/_4_05_ParticleSystemInheritancePolymorphism/Confetti.pde processingjs/chapter04/_4_05_ParticleSystemInheritancePolymorphism/Particle.pde processingjs/chapter04/_4_05_ParticleSystemInheritancePolymorphism/ParticleSystem.pde",classname="screenshot"]

[[chapter04_example5]]
[example]*Example 4.5: Particle System Inheritance and Polymorphism*

[source,java]
----
class ParticleSystem {
  // One list, for anything that is a Particle 
  // or extends Particle
  ArrayList<Particle> particles;  // [bold]	
  PVector origin;

  ParticleSystem(PVector location) {
    origin = location.get();
    particles = new ArrayList<Particle>();
  }

  void addParticle() {
    float r = random(1);
    // We have a 50% chance of adding each kind of Particle.
    if (r < 0.5) { 				
      particles.add(new Particle(origin));  // [bold]
    } else {
      particles.add(new Confetti(origin));  // [bold]
    }
  }

  void run() {
    Iterator it = particles.iterator();
    while (it.hasNext()) {
      // Polymorphism allows us to treat everything as a
      // Particle, whether it is a Particle or a Confetti.
      Particle p = it.next(); // [bold]
      p.run();
      if (p.isDead()) {
        it.remove();
      }
    }
  }
}
----

[[chapter04_exercise8]]
.Exercise 4.8
==============================
Exercise:  Create a particle system with different “kinds” of particles in the same system.  Try varying more than just the look of the particles.  How do you deal with different behaviors using inheritance? 
==============================

[[chapter04_section11]]
=== 4.11 Particle Systems with Forces

So far in this chapter, we’ve been focusing on structuring our code in an object-oriented way to manage a collection of Particle objects.   Maybe you noticed, or maybe you didn’t, but during this process we unwittingly took a couple steps backward from where we were in previous chapters.  Let’s examine the constructor of our simple Particle class.

[source,java]
----
  Particle(PVector l) {
    // We’re setting acceleration to a constant value!
    acceleration = new PVector(0,0.05); // [bold]
    velocity = new PVector(random(-1,1),random(-2,0));
    location = l.get();
    lifespan = 255.0;
  }
----
And now let’s look at the [function]*update()* function.

[source,java]
----
  void update() {
    velocity.add(acceleration);
    location.add(velocity);

    [inline]// Where is the line of code to clear acceleration?

    lifespan -= 2.0;
  }
----

Our Particle class is structured to have a constant acceleration, one that never changes.  A much better framework would be to follow Newton’s second law (F = M* A) and incorporate the force accumulation algorithm we worked so hard on in <<chapter02_section3, Chapter 2>>.  

Step 1 would be to add in the [function]*applyForce()* function. (Remember, we need to make a copy of the PVector before we divide it by mass.)

[source,java]
----
  void applyForce(PVector force) {
    PVector f = force.get();
    f.div(mass);
    acceleration.add(f);
  }
----

Once we have this, we can add in one more line of code to clear the acceleration at the end of [function]*update()*.

[source,java]
----
 void update() {
   velocity.add(acceleration);
   location.add(velocity);
   // There it is!
   acceleration.mult(0);
   lifespan -= 2.0;
  }
----

And our Particle class is complete!

[source,java]
----
class Particle {
  PVector location;
  PVector velocity;
  PVector acceleration;
  float lifespan;
  
  // We could vary mass for more interesting results.
  float mass = 1; 		

  Particle(PVector l) {
    // We now start with acceleration of 0.
    acceleration = new PVector(0,0);
    velocity = new PVector(random(-1,1),random(-2,0));
    location = l.get();
    lifespan = 255.0;
  }

  void run() {
    update();
    display();
  }

  // Newton’s second law & force accumulation
  void applyForce(PVector force) {
    PVector f = force.get();
    f.div(mass);
    acceleration.add(f);
  }

  // Standard update
  void update() {
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
    lifespan -= 2.0;
  }

  // Our Particle is a circle.
  void display() {
    stroke(255,lifespan);
    fill(255,lifespan);
    ellipse(location.x,location.y,8,8);
  }

  // Should the Particle be deleted?
  boolean isDead() {
    if (lifespan < 0.0) {
      return true;
    } else {
      return false;
    }
  }
}
----

Now that the Particle class is completed, we have a very important question to ask.  Where do we call the [function]*applyForce()* function?  Where in the code is it appropriate to apply a force to a particle?   The truth of the matter is that there’s no right or wrong answer; it really depends on the exact functionality and goals of a particular Processing sketch.  Still, we can create a generic situation that would likely apply to most cases and create a model for applying forces to individual particles in a system.

Let’s consider the following goal: Apply a force globally every time through draw() to all particles.

Let’s just pick an easy one: a force pointing down, like gravity.

[source,java]
----
PVector gravity = new PVector(0,0.1);
----

We said it should always be applied, i.e. in [function]*draw()*, so let’s take a look at our [function]*draw()* function as it stands.

[source,java]
----
void draw() {
  background(100);
  ps.addParticle();
  ps.run();
}
----

Well, it seems that we have a small problem.  [function]*applyForce()* is a method written inside the Particle class, but we don’t have any reference to the individual particles themselves, only the ParticleSystem object: the variable ps.

Since we want all particles to receive the force, however, we can decide to apply the force to the particle system and let it manage applying the force to all the individual particles:

[source,java]
----
void draw() {
  background(100);
  
  PVector gravity = new PVector(0,0.1);
  // Applying a force to the system as a whole
  ps.applyForce(gravity);
  
  ps.addParticle();
  ps.run();
}
----

Of course, if we call a new function on the ParticleSystem object in [function]*draw()*, well, we have to write that function in the ParticleSystem class.   Let’s describe the job that function needs to perform:

[NOTE]
==============================
Receive a force as a PVector and apply that force to all the particles._
==============================

Now in code:

[source,java]
----
  void applyForce(PVector f) {
    for (Particle p: particles) {    
      p.applyForce(f);
    }
  }  
----

It almost seems silly to write this function.   What we’re saying is “apply a force to a particle system so that the system can apply that force to all of the individual particles.”   Nevertheless, it’s really quite reasonable.  After all, the ParticleSystem object is in charge of managing the particles, so if we want to talk to the particles, we’ve got to talk to them through their manager.  (Also, here’s a chance for the enhanced loop since we aren’t deleting particles!)

Here is the full example (assuming the existence of the Particle class written above; no need to include it again since nothing has changed):

image::imgs/chapter04/ch04_ex06.png[canvas="processingjs/chapter04/_4_06_ParticleSystemForces/_4_06_ParticleSystemForces.pde processingjs/chapter04/_4_06_ParticleSystemForces/Particle.pde processingjs/chapter04/_4_06_ParticleSystemForces/ParticleSystem.pde",classname="screenshot"]

[[chapter04_example6]]
[example]*Example 4.6: Particle system with forces*

[source,java]
----
ParticleSystem ps;

void setup() {
  size(200,200);
  smooth();
  ps = new ParticleSystem(new PVector(width/2,50));
}

void draw() {
  background(100);
  
  // Apply a force to all particles.
  PVector gravity = new PVector(0,0.1); // [bold]
  ps.applyForce(gravity); // [bold]
  
  ps.addParticle();
  ps.run();
}


class ParticleSystem {
  ArrayList<Particle> particles;
  PVector origin;

  ParticleSystem(PVector location) {
    origin = location.get();
    particles = new ArrayList<Particle>();
  }

  void addParticle() {
    particles.add(new Particle(origin));
  }

  // Using an enhanced loop to apply the force to all particles
  void applyForce(PVector f) {
    for (Particle p: particles) {
      p.applyForce(f);
    }
  }

  void run() {
    // Can’t use the enhanced loop because we 
    // want to check for particles to delete
    Iterator it = particles.iterator();
    while (it.hasNext()) {
      Particle p = (Particle) it.next();
      p.run();
      if (p.isDead()) {
        it.remove();
      }
    }
  }
}
----

[[chapter04_section12]]
=== 4.12 Particle Systems with Repellers

What if we wanted to take this example one step further and add a “Repeller” object (the inverse of the Attractor object we covered in <<chapter02_section9, Chapter 2>> that pushes any particles away that get close?  This requires a bit more sophistication because, unlike the gravity force, each force an Attractor or Repeller exerts on a particle must be calculated for each Particle.

[[chapter04_figure3]]
image::imgs/chapter04/ch04_03.png[classname="two-col-borderless",alt="Figure 4.3: Gravity force: Vectors are all identical"]
[[chapter04_figure4]]
image::imgs/chapter04/ch04_04.png[classname="two-col-borderless",alt="Figure 4.4: Attractor force: Vectors are all different"]

Let’s start solving this problem by examining how we would incorporate a new Repeller object into our simple particle system plus forces example.  We’re going to need two major additions to our code:

. A Repeller object (declared, initialized, and displayed).
. A function that passes the Repeller object into the ParticleSystem so that it can apply a force to each particle object.

[source,java]
----
ParticleSystem ps;
// New thing #1: we need a Repeller class.
Repeller repeller; // [bold]

void setup() {
  size(200,200);
  smooth();
  ps = new ParticleSystem(new PVector(width/2,50));
  // New thing #1: we need a Repeller class.
  repeller = new Repeller(width/2-20,height/2); // [bold]
}

void draw() {
  background(100);
  ps.addParticle();
  
  PVector gravity = new PVector(0,0.1);
  ps.applyForce(gravity);
  
  // New thing #2: we need a function to apply 
  // a force from a repeller.
  ps.applyRepeller(repeller); // [bold]
  
  ps.run();
  // New thing #1: we need a Repeller class.
  repeller.display(); // [bold]
}
----

Making a Repeller object is quite easy; it’s a duplicate of the Attractor class from Chapter 2 (<<chapter02_example6, Example 2.6>>).

[source,java]
----
class Repeller {
  // A Repeller doesn’t move, so you just need location.
  PVector location;
  float r = 10;

  Repeller(float x, float y)  {
    location = new PVector(x,y);
  }

  void display() {
    stroke(255);
    fill(255);
    ellipse(location.x,location.y,r*2,r*2);
  }
}
----

The more difficult question is, how do we write the [function]*applyRepeller()* function?  Instead of passing a PVector into a function like we do with [function]*applyForce()*, we’re going to instead pass a Repeller object into [function]*applyRepeller()* and ask that function to do the work of calculating the force between the Repeller and all particles.  Let’s look at both of these functions side by side.

++++
<table class="code">
<tr>
<th>applyForce()</th>
<th>applyRepeller</th>
</tr>
<tr>
<td>
<pre>
void applyForce(PVector f) {
  for (Particle p: particles) {
    p.applyForce(f);
  }
}
</pre>
</td>
<td>
<pre>
void applyRepeller(Repeller r) {
  for (Particle p: particles) {
    PVector force = r.repel(p);
    p.applyForce(force);
  }
}
</pre>
</td>
</tr>
</table>
++++

The functions are almost identical.  There are only two differences. One we mentioned before—a Repeller object is the argument, not a PVector.  The second difference is the important one.   We must calculate a custom PVector force for each and every particle and apply that force.  How is that force calculated?   In a function called [function]*repel()*, which is the inverse of the [function]*attract()* function we wrote for the Attractor class.

[source,java]
----
   // All the same steps we had to calculate an attractive force, only pointing in the opposite direction.
  PVector repel(Particle p) {
    // 1) Get force direction
    PVector dir = PVector.sub(location,p.location);
    // 2) Get distance (constrain distance)
    float d = dir.mag();
    dir.normalize();
    d = constrain(d,5,100);
    // 3) Calculate magnitude
    float force = -1 * G / (d * d);
    // 4) Make a vector out of direction and magnitude
    dir.mult(force);
    return dir;
  }
----

Notice how throughout this entire process of adding a Repeller to the environment, we’ve never once considered editing the Particle class itself.   A particle doesn’t actually have to know anything about the details of its environment; it simply needs to manage its location, velocity, and acceleration, as well as have the ability to receive an external force and act on it.

So we can now look at this example in its entirety, again leaving out the Particle class, which hasn’t changed.

image::imgs/chapter04/ch04_ex07.png[canvas="processingjs/chapter04/_4_07_ParticleSystemForcesRepeller/_4_07_ParticleSystemForcesRepeller.pde processingjs/chapter04/_4_07_ParticleSystemForcesRepeller/Repeller.pde processingjs/chapter04/_4_07_ParticleSystemForcesRepeller/Particle.pde processingjs/chapter04/_4_07_ParticleSystemForcesRepeller/ParticleSystem.pde",classname="screenshot"]

[[chapter04_example7]]
[example]*Example 4.7: ParticleSystem with repeller*

[source,java]
----
// One Particle System
ParticleSystem ps;
// One Repeller
Repeller repeller;

void setup() {
  size(200,200);
  smooth();
  ps = new ParticleSystem(new PVector(width/2,50));
  repeller = new Repeller(width/2-20,height/2);
}

void draw() {
  background(100);
  ps.addParticle();
  
  // We’re applying a universal gravity.
  PVector gravity = new PVector(0,0.1);
  ps.applyForce(gravity);
  
  // Applying the repeller
  ps.applyRepeller(repeller);
  
  ps.run();
  repeller.display();
}


// The ParticleSystem manages all the Particles.
class ParticleSystem {
  ArrayList<Particle> particles;
  PVector origin;

  ParticleSystem(PVector location) {
    origin = location.get();
    particles = new ArrayList<Particle>();
  }

  void addParticle() {
    particles.add(new Particle(origin));
  }

  // Applying a force as a PVector
  void applyForce(PVector f) {
    for (Particle p: particles) {
      p.applyForce(f);
    }
  }

  // Calculating a force for each Particle based on a Repeller
  void applyRepeller(Repeller r) {
    for (Particle p: particles) {
      PVector force = r.repel(p);
      p.applyForce(force);
    }
  }

  void run() {
    Iterator it = particles.iterator();
    while (it.hasNext()) {
      Particle p = (Particle) it.next();
      p.run();
      if (p.isDead()) {
        it.remove();
      }
    }
  }
}

class Repeller {
  
  // How strong is the repeller?
  float strength = 100;
  PVector location;
  float r = 10;

  Repeller(float x, float y)  {
    location = new PVector(x,y);
  }

  void display() {
    stroke(255);
    fill(255);
    ellipse(location.x,location.y,r*2,r*2);
  }

  // This is the same repel algorithm we used 
  // in Chapter 2: forces based on 
  // gravitational attraction.
  PVector repel(Particle p) {
    PVector dir = PVector.sub(location,p.location);
    float d = dir.mag();
    dir.normalize();
    d = constrain(d,5,100);
    float force = -1 * strength / (d * d);
    dir.mult(force);
    return dir;
  }  
}
----

[[chapter04_exercise9]]
.Exercise 4.9
==============================
Expand the above example to include many Repellers (using an array or ArrayList).
==============================

[[chapter04_exercise10]]
.Exercise 4.10
==============================
Create a particle system in which each particle responds to every other particle.  (Note we’ll be doing this in detail in Chapter 6.)
==============================

[[chapter04_section13]]
=== 4.13 Image Textures and Additive Blending

Even though this book is really about behaviors and algorithms rather than computer graphics and design, I don’t think we would be able to live with ourselves if we went through a discussion of particle systems and never once looked at an example that involves texturing each particle with an image.  The way you choose to draw a particle is a big part of the puzzle in terms of designing certain types of visual effects.   

Let’s try to create a smoke simulation in Processing.  Take a look at the following two images:

image::imgs/chapter04/ch04_ex08b.png[classname="two-col-borderless",alt="White circles",canvas="processingjs/chapter04/_4_08_ParticleSystemSmoke_b/_4_08_ParticleSystemSmoke_b.pde processingjs/chapter04/_4_08_ParticleSystemSmoke_b/Particle.pde processingjs/chapter04/_4_08_ParticleSystemSmoke_b/ParticleSystem.pde"]
image::imgs/chapter04/ch04_ex08a.png[classname="two-col-borderless",alt="Fuzzy images with transparency",canvas="processingjs/chapter04/_4_08_ParticleSystemSmoke/_4_08_ParticleSystemSmoke.pde processingjs/chapter04/_4_08_ParticleSystemSmoke/Particle.pde processingjs/chapter04/_4_08_ParticleSystemSmoke/ParticleSystem.pde"]

Both of these images were generated from identical algorithms. The only difference is that a white circle is drawn in image A for each particle and a “fuzzy” blob is drawn for each in B.

[[chapter04_figure5]]
image::imgs/chapter04/ch04_05.png[alt="Figure 4.5"]

The good news here is that you get a lot of bang for very little buck.   Before you write any code, however, you’ve got to make your image texture!  I recommend using PNG format, as Processing will retain the alpha channel (i.e. transparency) when drawing the image, which is needed for blending the texture as particles layer on top of each other.  Once you’ve made your PNG and deposited it in your sketch’s “data” folder, you are on your way with just a few lines of code.

First, we’ll need to declare a PImage object.

[[chapter04_example8]]
[example]*Example 4.8: Image texture particle system*

[source,java]
----
PImage img;
----

Load the image in [function]*setup()*.

[source,java]
----
void setup() {
  // Loading the PNG
  img = loadImage("texture.png");
}
----

And when it comes time to draw the particle, we’ll use the image reference instead of drawing an ellipse or rectangle.

[source,java]
----
  void render() {
    imageMode(CENTER);
    // Note how tint() is the image equivalent of shape’s fill().
    tint(255,lifespan);
    image(img,loc.x,loc.y);
  }
----

Incidentally, this smoke example is a nice excuse to revisit a Gaussian number distribution (see <<intro_section4, Introduction Section 4>>).  To make the smoke appear a bit more realistic, we don’t want to launch all the particles in a purely random direction.  Instead, by creating initial velocity vectors mostly around a mean value (with a lower probability of outliers), we’ll get an effect that appears less fountain-like and more like smoke (or fire).  

Assuming a Random object called “generator”, we could create initial velocities as follows:

[source,java]
----
    float vx = (float) generator.nextGaussian()*0.3;
    float vy = (float) generator.nextGaussian()*0.3 - 1.0;
    vel = new PVector(vx,vy);
----

Finally, in this example, a wind force is applied to the smoke mapped from the mouse’s horizontal location.

[source,java]
----
void draw() {
  background(0);
  
  float dx = map(mouseX,0,width,-0.2,0.2);
  // Wind force points towards mouseX.
  PVector wind = new PVector(dx,0);
  ps.applyForce(wind);
  ps.run();
  // Two particles are added each cycle through draw().
  for (int i = 0; i < 2; i++) {             
    ps.addParticle();
  }
}
----

[[chapter04_exercise11]]
.Exercise 4.11
==============================
Exercise: Try creating your own textures for different types of effects.  Can you make it look like fire, instead of smoke? 
==============================

[[chapter04_exercise12]]
.Exercise 4.12
==============================
Exercise: Use an array of images and assign each Particle object a different image.  Even though single images are drawn by multiple particles, make sure you don’t call loadImage() any more than you need to, i.e once for each image file.
==============================

Finally, it’s worth noting that there are many different algorithms for blending colors in computer graphics. These are often referred to as “blend modes.”  By default, when we draw something on top of something else in Processing, we only see the top layer—this is commonly referred to as a “normal” blend mode.  When the pixels have alpha transparency (as they do in the smoke example), Processing uses an alpha compositing algorithm that combines a percentage of the background pixels with the new foreground pixels based on the alpha values.

However, it’s possible to draw using other blend modes, and a much loved blend mode for particle systems is “additive.”  Additive blending in Processing was pioneered by flight404.com [Robert Hodgin] in his famous particle system and forces exploration, Magnetosphere, (which later became the iTunes visualizer.  For more see: http://roberthodgin.com/magnetosphere-part-2/[Magnetosphere]) 

Additive blending is in fact one of the simplest blend algorithms and involves adding the pixel values of one layer with another (capping all values at 255 of course).  This results in a space-age glow effect due to the colors getting brighter and brighter with more layers.

image::imgs/chapter04/ch04_ex09.png[]

To achieve additive blending in Processing, you’ll need to use the P2D or P3D renderer.

[[chapter04_example9]]
[example]*Example 4.9: Additive blending*

[source,java]
----
void setup() {
  // Using the P2D  renderer
  size(200,200,P2D);
}
----

Then, before you go to draw anything, you set the blend mode using [function]*blendMode()*:

[source,java]
----
void draw() {
  // Additive blending
  blendMode(ADD);

  // Note the “glowing” effect of additive 
  // blending will not work with a white
  // (or very bright) background.
  background(0);

  [inline]// All your other particle stuff would go here.

}
----

[[chapter04_exercise13]]
.Exercise 4.13
==============================
Use [function]*tint()* in combination with additive blending to create a rainbow effect.
==============================

[[chapter04_exercise14]]
.Exercise 4.14
==============================
Try blending with other modes, such as: [var]*SUBTRACT*, [var]*LIGHTEST*, [var]*DARKEST*, [var]*DIFFERENCE*, [var]*EXCLUSION*, [var]*MULTIPLY*.
==============================

[TIP]
.The Ecosystem Project
==============================
Step 4 Exercise:

Take your creature from step 3 and build a system of creatures.   How can they interact with each other?  Can you use inheritance and polymorphism to create a variety of creatures, derived from the same code base?   Develop a methodology for how they compete for resources (for example, food).   Can you track a creature’s “health” much like we tracked a particle’s lifespan, removing creatures when appropriate?  What rules can you incorporate to control how creatures are born?

(Also, you might consider using a particle system itself in the design of a creature.  What happens if your emitter is tied to the creature’s location?)
==============================